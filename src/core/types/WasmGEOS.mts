// Generated by: cpp/scripts/process-geos-docs/index.mjs

export type i8 = number;
export type u8 = number;
export type i32 = number;
export type u32 = number;
export type f64 = number;

export type Ptr<T> = number & { target: T };
export type ConstPtr<T> = Ptr<T>;


/**
 * Type returned by {@link GEOS_init_r()}, for use with the functions ending in `_r` (the reentrant API).
 * Contexts must only be used from a single thread at a time.
 */
export type GEOSContextHandle_t = 'GEOSContextHandle_t';

/**
 * Callback function for passing GEOS error messages to parent process.
 * Set the {@link GEOSMessageHandler} function for error and notice messages using {@link initGEOS} or {@link initGEOS_r}.
 * @param fmt - the message format template
 */
export type GEOSMessageHandler = (fmt: ConstPtr<string>) => void;

/**
 * A GEOS message handler function.
 * @param message - the message contents
 * @param userdata - the user data pointer that was passed to GEOS when registering this message handler.
 */
export type GEOSMessageHandler_r = (message: ConstPtr<string>, userdata: Ptr<void>) => void;

/**
 * The generic type for a geometry. A geometry can be a Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, or GeometryCollection. The geometry type can be read with {@link GEOSGeomTypeId}. Most functions in GEOS have `GEOSGeometry *` as either a parameter or a return type.
 * @see GEOSGeom_createPoint
 * @see GEOSGeom_createLineString
 * @see GEOSGeom_createPolygon
 * @see GEOSGeom_createCollection
 * @see GEOSGeom_destroy
 */
export type GEOSGeometry = 'GEOSGeometry';

/**
 * Prepared geometry type.
 * @see GEOSPrepare()
 * @see GEOSPreparedGeom_destroy()
 */
export type GEOSPreparedGeometry = 'GEOSPreparedGeometry';

/**
 * Coordinate sequence type representing fixed-size lists of coordinates. Contains the list of vertices defining the location of a {@link GEOSGeometry}.
 * @see GEOSCoordSeq_create()
 * @see GEOSCoordSeq_destroy()
 */
export type GEOSCoordSequence = 'GEOSCoordSequence';

/**
 * STRTree index.
 * @see GEOSSTRtree_create()
 * @see GEOSSTRtree_destroy()
 */
export type GEOSSTRtree = 'GEOSSTRtree';

/**
 * Parameter object for buffering.
 * @see GEOSBufferParams_create()
 * @see GEOSBufferParams_destroy()
 */
export type GEOSBufferParams = 'GEOSBufferParams';

/**
 * Parameter object for validity enforcement.
 * @see GEOSMakeValidParams_create()
 * @see GEOSMakeValidParams_destroy()
 */
export type GEOSMakeValidParams = 'GEOSMakeValidParams';

/**
 * Callback function for use in spatial index search calls. Pass into the query function and handle query results as the index returns them.
 * @see GEOSSTRtree_query
 */
export type GEOSQueryCallback = (item: Ptr<void>, userdata: Ptr<void>) => void;

/**
 * Callback function for use in spatial index nearest neighbor calculations. Allows custom distance to be calculated between items in the index. Is passed two items, and sets the calculated distance between the items into the distance pointer. Extra data for the calculation can be passed via the userdata.
 * @param item1 - first of the pair of items to calculate distance between
 * @param item2 - second of the pair of items to calculate distance between
 * @param distance - the distance between the items here
 * @param userdata - extra data for the calculation
 * @returns 1 if distance calculation succeeds, 0 otherwise
 * @see GEOSSTRtree_nearest_generic
 * @see GEOSSTRtree_iterate
 */
export type GEOSDistanceCallback = (item1: ConstPtr<void>, item2: ConstPtr<void>, distance: Ptr<f64>, userdata: Ptr<void>) => i32;

/**
 * Callback function for use in GEOSGeom_transformXY. Allows custom function to be applied to x and y values for each coordinate in a geometry. Z values are unchanged by this function. Extra data for the calculation can be passed via the userdata.
 * @param x - coordinate value to be updated
 * @param y - coordinate value to be updated
 * @param userdata - extra data for the calculation
 * @returns 1 if calculation succeeded, 0 on failure
 */
export type GEOSTransformXYCallback = (x: Ptr<f64>, y: Ptr<f64>, userdata: Ptr<void>) => i32;

/**
 * Callback function for use in interruption. The callback will be invoked _before_ checking for interruption, so can be used to request it.
 * @see GEOS_interruptRegisterCallback
 * @see GEOS_interruptRequest
 * @see GEOS_interruptCancel
 */
export type GEOSInterruptCallback = () => void;

/**
 * Reader object to read Well-Known Text (WKT) format and construct Geometry.
 * @see GEOSWKTReader_create
 * @see GEOSWKTReader_create_r
 */
export type GEOSWKTReader = 'GEOSWKTReader';

/**
 * Writer object to turn Geometry into Well-Known Text (WKT).
 * @see GEOSWKTWriter_create
 * @see GEOSWKTWriter_create_r
 */
export type GEOSWKTWriter = 'GEOSWKTWriter';

/**
 * Reader object to read Well-Known Binary (WKB) format and construct Geometry.
 * @see GEOSWKBReader_create
 * @see GEOSWKBReader_create_r
 */
export type GEOSWKBReader = 'GEOSWKBReader';

/**
 * Writer object to turn Geometry into Well-Known Binary (WKB).
 * @see GEOSWKBWriter_create
 * @see GEOSWKBWriter_create_r
 */
export type GEOSWKBWriter = 'GEOSWKBWriter';

/**
 * Reader object to read GeoJSON format and construct a Geometry.
 * @see GEOSGeoJSONReader_create
 * @see GEOSGeoJSONReader_create_r
 */
export type GEOSGeoJSONReader = 'GEOSGeoJSONReader';

/**
 * Writer object to turn a Geometry into GeoJSON.
 * @see GEOSGeoJSONReader_create
 * @see GEOSGeoJSONReader_create_r
 */
export type GEOSGeoJSONWriter = 'GEOSGeoJSONWriter';

/**
 * Geometry type number, used by functions returning or consuming geometry types.
 * @see GEOSGeomType
 * @see GEOSGeomTypeId
 */
export declare enum GEOSGeomTypes {
    /** Point */
    GEOS_POINT = 0,
    /** Linestring */
    GEOS_LINESTRING = 1,
    /** Linear ring, used within polygons */
    GEOS_LINEARRING = 2,
    /** Polygon */
    GEOS_POLYGON = 3,
    /** Multipoint, a homogeneous collection of points */
    GEOS_MULTIPOINT = 4,
    /** Multilinestring, a homogeneous collection of linestrings */
    GEOS_MULTILINESTRING = 5,
    /** Multipolygon, a homogeneous collection of polygons */
    GEOS_MULTIPOLYGON = 6,
    /** Geometry collection, a heterogeneous collection of geometry */
    GEOS_GEOMETRYCOLLECTION = 7,
    GEOS_CIRCULARSTRING = 8,
    GEOS_COMPOUNDCURVE = 9,
    GEOS_CURVEPOLYGON = 10,
    GEOS_MULTICURVE = 11,
    GEOS_MULTISURFACE = 12,
}

/**
 * Well-known binary byte orders used when writing to WKB.
 * @see GEOSWKBWriter_setByteOrder
 */
export declare enum GEOSWKBByteOrders {
    /** Big Endian */
    GEOS_WKB_XDR = 0,
    /** Little Endian */
    GEOS_WKB_NDR = 1,
}

/**
 * Well-known binary flavors to use when writing to WKB. ISO flavour is more standard. Extended flavour supports 3D and SRID embedding. GEOS reads both transparently.
 * @see GEOSWKBWriter_setFlavor
 */
export declare enum GEOSWKBFlavors {
    /** Extended */
    GEOS_WKB_EXTENDED = 1,
    /** ISO */
    GEOS_WKB_ISO = 2,
}

/**
 * Cap styles control the ends of buffered lines.
 * @see GEOSBuffer
 */
export declare enum GEOSBufCapStyles {
    /** End is rounded, with end point of original line in the centre of the round cap. */
    GEOSBUF_CAP_ROUND = 1,
    /** End is flat, with end point of original line at the end of the buffer */
    GEOSBUF_CAP_FLAT = 2,
    /** End is flat, with end point of original line in the middle of a square enclosing that point */
    GEOSBUF_CAP_SQUARE = 3,
}

/**
 * Join styles control the buffer shape at bends in a line.
 * @see GEOSBuffer
 */
export declare enum GEOSBufJoinStyles {
    /** Join is rounded, essentially each line is terminated in a round cap. Form round corner. */
    GEOSBUF_JOIN_ROUND = 1,
    /** Join is flat, with line between buffer edges, through the join point. Forms flat corner. */
    GEOSBUF_JOIN_MITRE = 2,
    /** Join is the point at which the two buffer edges intersect. Forms sharp corner. */
    GEOSBUF_JOIN_BEVEL = 3,
}

/**
 * Controls the behavior of the result of GEOSRelate when returning DE9IM results for two geometries.
 */
export declare enum GEOSRelateBoundaryNodeRules {
    /** See geos::algorithm::BoundaryNodeRule::getBoundaryRuleMod2() */
    GEOSRELATE_BNR_MOD2 = 1,
    /** Same as GEOSRELATE_BNR_MOD2 */
    GEOSRELATE_BNR_OGC = 1,
    /** See geos::algorithm::BoundaryNodeRule::getBoundaryEndPoint() */
    GEOSRELATE_BNR_ENDPOINT = 2,
    /** See geos::algorithm::BoundaryNodeRule::getBoundaryMultivalentEndPoint() */
    GEOSRELATE_BNR_MULTIVALENT_ENDPOINT = 3,
    /** See geos::algorithm::BoundaryNodeRule::getBoundaryMonovalentEndPoint() */
    GEOSRELATE_BNR_MONOVALENT_ENDPOINT = 4,
}

/**
 * Change behaviour of validity testing in {@link GEOSisValidDetail}
 */
export declare enum GEOSValidFlags {
    /** Allow self-touching rings to form a hole in a polygon. */
    GEOSVALID_ALLOW_SELFTOUCHING_RING_FORMING_HOLE = 1,
}

/**
 * Algorithm to use when repairing invalid geometries.
 * @see GEOSMakeValidWithParams
 */
export declare enum GEOSMakeValidMethods {
    /** Original method, combines all rings into a set of noded lines and then extracts valid polygons from that linework. */
    GEOS_MAKE_VALID_LINEWORK = 0,
    /** Structured method, first makes all rings valid then merges shells and subtracts holes from shells to generate valid result. Assumes that holes and shells are correctly categorized. */
    GEOS_MAKE_VALID_STRUCTURE = 1,
}

/**
 * Controls the behavior of {@link GEOSGeom_setPrecision()} when altering the precision of a geometry.
 */
export declare enum GEOSPrecisionRules {
    /** The output is always valid. Collapsed geometry elements (including both polygons and lines) are removed. */
    GEOS_PREC_VALID_OUTPUT = 0,
    /** Precision reduction is performed pointwise. Output geometry may be invalid due to collapse or self-intersection. (This might be better called "GEOS_PREC_POINTWISE" - the current name is historical.) */
    GEOS_PREC_NO_TOPO = 1,
    /** Like the default mode, except that collapsed linear geometry elements are preserved. Collapsed polygonal input elements are removed. */
    GEOS_PREC_KEEP_COLLAPSED = 2,
}

/**
 * Controls the behavior of the GEOSPolygonHullSimplify parameter.
 */
export declare enum GEOSPolygonHullParameterModes {
    /** Fraction of input vertices retained */
    GEOSHULL_PARAM_VERTEX_RATIO = 1,
    /** Ratio of simplified hull area to input area */
    GEOSHULL_PARAM_AREA_RATIO = 2,
}

/**
 * Change behaviour of {@link GEOSVoronoiDiagram}
 */
export declare enum GEOSVoronoiFlags {
    /** Return only edges of the Voronoi cells, as a MultiLineString */
    GEOS_VORONOI_ONLY_EDGES = 1,
    /** Preserve order of inputs, such that the nth cell in the result corresponds to the nth vertex in the input. If this cannot be done, such as for inputs that contain repeated points, GEOSVoronoiDiagram will return NULL. */
    GEOS_VORONOI_PRESERVE_ORDER = 2,
}

export interface WasmGEOS {

    /**
     * Register a function to be called when processing is interrupted.
     * @param cb - Callback function to invoke
     * @returns the previously configured callback
     * @see GEOSInterruptCallback
     * @deprecated this function is not exported
     */
    GEOS_interruptRegisterCallback(cb: Ptr<GEOSInterruptCallback>): Ptr<GEOSInterruptCallback>;

    /**
     * Request safe interruption of operations
     * @deprecated this function is not exported
     */
    GEOS_interruptRequest(): void;

    /**
     * Cancel a pending interruption request
     * @deprecated this function is not exported
     */
    GEOS_interruptCancel(): void;

    /**
     * Allocate and initialize a context. Pass this context as the first argument when calling other `*_r` functions. Contexts must only be used from a single thread at a time.
     * @returns a new GEOS context.
     */
    GEOS_init_r(): Ptr<GEOSContextHandle_t>;

    /**
     * Free the memory associated with a {@link GEOSContextHandle_t} when you are finished calling GEOS functions.
     * @param handle - to be freed
     * @deprecated this function is not exported
     */
    GEOS_finish_r(handle: Ptr<GEOSContextHandle_t>): void;

    /**
     * Set the notice handler callback function for run-time notice messages.
     * @param extHandle - the context returned by GEOS_init_r.
     * @param nf - the handler callback
     * @returns the previously configured message handler or NULL if no message handler was configured
     * @deprecated this function is not exported
     */
    GEOSContext_setNoticeHandler_r(extHandle: Ptr<GEOSContextHandle_t>, nf: Ptr<GEOSMessageHandler>): Ptr<GEOSMessageHandler>;

    /**
     * Set the notice handler callback function for run-time error messages.
     * @param extHandle - the GEOS context from GEOS_init_r
     * @param ef - the handler callback
     * @returns the previously configured message handler or NULL if no message handler was configured
     * @deprecated this function is not exported
     */
    GEOSContext_setErrorHandler_r(extHandle: Ptr<GEOSContextHandle_t>, ef: Ptr<GEOSMessageHandler>): Ptr<GEOSMessageHandler>;

    /**
     * Sets a notice message handler on the given GEOS context.
     * @param extHandle - the GEOS context from GEOS_init_r
     * @param nf - the message handler
     * @param userData - optional user data pointer that will be passed to the message handler
     * @returns the previously configured message handler or NULL if no message handler was configured
     * @deprecated this function is not exported
     */
    GEOSContext_setNoticeMessageHandler_r(extHandle: Ptr<GEOSContextHandle_t>, nf: Ptr<GEOSMessageHandler_r>, userData: Ptr<void>): Ptr<GEOSMessageHandler_r>;

    /**
     * Sets an error message handler on the given GEOS context.
     * @param extHandle - the GEOS context
     * @param ef - the message handler
     * @param userData - optional user data pointer that will be passed to the message handler
     * @returns the previously configured message handler or NULL if no message handler was configured
     */
    GEOSContext_setErrorMessageHandler_r(extHandle: Ptr<GEOSContextHandle_t>, ef: Ptr<GEOSMessageHandler_r>, userData: Ptr<void>): Ptr<GEOSMessageHandler_r>;

    /**
     * Print the shortest representation of a double. Non-zero absolute values that are <1e-4 and >=1e+17 are formatted using scientific notation, and other values are formatted with positional notation with precision used for the max digits after decimal point.
     * @param d - The number to format.
     * @param precision - The desired precision.
     * @param result - The buffer to write the result to, with a suggested size 28.
     * @returns the length of the written string.
     * @deprecated this function is not exported
     */
    GEOS_printDouble(d: f64, precision: u32, result: Ptr<string>): i32;

    /**
     * Returns the current GEOS version string. eg: "3.10.0" This function does not have a reentrant variant and is available if `GEOS_USE_ONLY_R_API` is defined.
     * @returns version string
     */
    GEOSversion(): ConstPtr<string>;

    /**
     * For non-reentrant code, set up an execution contact, and associate {@link GEOSMessageHandler} functions with it, to pass error and notice messages back to the calling application.
     * @param notice_function - Handle notice messages
     * @param error_function - Handle error messages
     * @deprecated this function is not exported
     */
    initGEOS(notice_function: Ptr<GEOSMessageHandler>, error_function: Ptr<GEOSMessageHandler>): void;

    /**
     * For non-reentrant code, call when all GEOS operations are complete, cleans up global resources.
     * @deprecated this function is not exported
     */
    finishGEOS(): void;

    /**
     * Free strings and byte buffers returned by functions such as {@link GEOSWKBWriter_write()}, {@link GEOSWKBWriter_writeHEX()} and {@link GEOSWKTWriter_write()}, etc. If passed a null pointer the function does nothing.
     * @param buffer - The memory to free (may be null)
     * @deprecated this function is not exported
     */
    GEOSFree(buffer: Ptr<void>): void;

    /**
     * Create a coordinate sequence.
     * @param size - number of coordinates in the sequence
     * @param dims - dimensionality of the coordinates (2, 3 or 4)
     * @returns the sequence or NULL on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_create(size: u32, dims: u32): Ptr<GEOSCoordSequence>;

    /**
     * Create a coordinate sequence by copying from an interleaved buffer of doubles (e.g., XYXY or XYZXYZ)
     * @param buf - pointer to buffer
     * @param size - number of coordinates in the sequence
     * @param hasZ - does buffer have Z values?
     * @param hasM - does buffer have M values?
     * @returns the sequence or NULL on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_copyFromBuffer(buf: ConstPtr<f64>, size: u32, hasZ: i32, hasM: i32): Ptr<GEOSCoordSequence>;

    /**
     * Create a coordinate sequence by copying from arrays of doubles
     * @param x - array of x coordinates
     * @param y - array of y coordinates
     * @param z - array of z coordinates, or NULL
     * @param m - array of m coordinates, or NULL
     * @param size - length of each array
     * @returns the sequence or NULL on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_copyFromArrays(x: ConstPtr<f64>, y: ConstPtr<f64>, z: ConstPtr<f64>, m: ConstPtr<f64>, size: u32): Ptr<GEOSCoordSequence>;

    /**
     * Copy the contents of a coordinate sequence to an interleaved buffer of doubles (e.g., XYXY or XYZXYZ)
     * @param s - sequence to copy
     * @param buf - buffer to which coordinates should be copied
     * @param hasZ - copy Z values to buffer?
     * @param hasM - copy M values to buffer?
     * @returns 1 on success, 0 on error
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_copyToBuffer(s: ConstPtr<GEOSCoordSequence>, buf: Ptr<f64>, hasZ: i32, hasM: i32): i32;

    /**
     * Copy the contents of a coordinate sequence to arrays of doubles
     * @param s - sequence to copy
     * @param x - array to which x values should be copied
     * @param y - array to which y values should be copied
     * @param z - array to which z values should be copied, or NULL
     * @param m - array to which m values should be copied, or NULL
     * @returns 1 on success, 0 on error
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_copyToArrays(s: ConstPtr<GEOSCoordSequence>, x: Ptr<f64>, y: Ptr<f64>, z: Ptr<f64>, m: Ptr<f64>): i32;

    /**
     * Clone a coordinate sequence.
     * @param s - the coordinate sequence to clone
     * @returns a copy of the coordinate sequence or NULL on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_clone(s: ConstPtr<GEOSCoordSequence>): Ptr<GEOSCoordSequence>;

    /**
     * Destroy a coordinate sequence, freeing all memory.
     * @param s - the coordinate sequence to destroy
     */
    GEOSCoordSeq_destroy(s: Ptr<GEOSCoordSequence>): void;

    /**
     * Set X ordinate values in a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - the value to set the ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setX(s: Ptr<GEOSCoordSequence>, idx: u32, val: f64): i32;

    /**
     * Set Y ordinate values in a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - the value to set the ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setY(s: Ptr<GEOSCoordSequence>, idx: u32, val: f64): i32;

    /**
     * Set Z ordinate values in a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - the value to set the ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setZ(s: Ptr<GEOSCoordSequence>, idx: u32, val: f64): i32;

    /**
     * Set X and Y ordinate values in a coordinate sequence simultaneously.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param x - the value to set the X ordinate to
     * @param y - the value to set the Y ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setXY(s: Ptr<GEOSCoordSequence>, idx: u32, x: f64, y: f64): i32;

    /**
     * Set X, Y and Z ordinate values in a coordinate sequence simultaneously.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param x - the value to set the X ordinate to
     * @param y - the value to set the Y ordinate to
     * @param z - the value to set the Z ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setXYZ(s: Ptr<GEOSCoordSequence>, idx: u32, x: f64, y: f64, z: f64): i32;

    /**
     * Set Nth ordinate value in a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param dim - the dimension number of the ordinate to alter, zero based
     * @param val - the value to set the ordinate to
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_setOrdinate(s: Ptr<GEOSCoordSequence>, idx: u32, dim: u32, val: f64): i32;

    /**
     * Read X ordinate values from a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - pointer where ordinate value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getX(s: ConstPtr<GEOSCoordSequence>, idx: u32, val: Ptr<f64>): i32;

    /**
     * Read Y ordinate values from a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - pointer where ordinate value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getY(s: ConstPtr<GEOSCoordSequence>, idx: u32, val: Ptr<f64>): i32;

    /**
     * Read Z ordinate values from a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param val - pointer where ordinate value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getZ(s: ConstPtr<GEOSCoordSequence>, idx: u32, val: Ptr<f64>): i32;

    /**
     * Read X and Y ordinate values from a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param x - pointer where ordinate X value will be placed
     * @param y - pointer where ordinate Y value will be placed
     * @returns 0 on exception
     */
    GEOSCoordSeq_getXY(s: ConstPtr<GEOSCoordSequence>, idx: u32, x: Ptr<f64>, y: Ptr<f64>): i32;

    /**
     * Read X and Y ordinate values from a coordinate sequence.
     * @param s - the coordinate sequence
     * @param idx - the index of the coordinate to alter, zero based
     * @param x - pointer where ordinate X value will be placed
     * @param y - pointer where ordinate Y value will be placed
     * @param z - pointer where ordinate Z value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getXYZ(s: ConstPtr<GEOSCoordSequence>, idx: u32, x: Ptr<f64>, y: Ptr<f64>, z: Ptr<f64>): i32;

    /**
     * Read Nth ordinate value from a coordinate sequence.
     * @param s (in) - the coordinate sequence
     * @param idx (in) - the index of the coordinate to alter, zero based
     * @param dim (in) - the dimension number of the ordinate to read, zero based
     * @param val (out) - pointer where ordinate value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getOrdinate(s: ConstPtr<GEOSCoordSequence>, idx: u32, dim: u32, val: Ptr<f64>): i32;

    /**
     * Get size info from a coordinate sequence.
     * @param s (in) - the coordinate sequence
     * @param size (out) - pointer where size value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getSize(s: ConstPtr<GEOSCoordSequence>, size: Ptr<u32>): i32;

    /**
     * Get dimension info from a coordinate sequence.
     * @param s (in) - the coordinate sequence
     * @param dims (out) - pointer where dimension value will be placed
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_getDimensions(s: ConstPtr<GEOSCoordSequence>, dims: Ptr<u32>): i32;

    /**
     * Check orientation of a coordinate sequence. Closure of the sequence is assumed. Invalid (collapsed) or short (fewer than 4 points) sequences return false.
     * @param s - the coordinate sequence
     * @param is_ccw - pointer for ccw value, 1 if counter-clockwise orientation, 0 otherwise
     * @returns 0 on exception, 1 on success
     * @deprecated this function is not exported
     */
    GEOSCoordSeq_isCCW(s: ConstPtr<GEOSCoordSequence>, is_ccw: Ptr<string>): i32;

    /**
     * Creates a point geometry from a coordinate sequence.
     * @param s - Input coordinate sequence, ownership passes to the geometry
     * @returns A newly allocated point geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createPoint(s: Ptr<GEOSCoordSequence>): Ptr<GEOSGeometry>;

    /**
     * Creates a point geometry from a pair of coordinates.
     * @param x - The X coordinate
     * @param y - The Y coordinate
     * @returns A newly allocated point geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     */
    GEOSGeom_createPointFromXY(x: f64, y: f64): Ptr<GEOSGeometry>;

    /**
     * Creates an empty point.
     * @returns A newly allocated empty point geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyPoint(): Ptr<GEOSGeometry>;

    /**
     * Creates a linear ring geometry, for use in a polygon.
     * @param s - Input coordinate sequence, ownership passes to the geometry
     * @returns A newly allocated linear ring geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createLinearRing(s: Ptr<GEOSCoordSequence>): Ptr<GEOSGeometry>;

    /**
     * Creates a linestring geometry.
     * @param s - Input coordinate sequence, ownership passes to the geometry
     * @returns A newly allocated linestring geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createLineString(s: Ptr<GEOSCoordSequence>): Ptr<GEOSGeometry>;

    /**
     * Creates an emptylinestring geometry.
     * @returns A newly allocated linestring geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyLineString(): Ptr<GEOSGeometry>;

    /**
     * Creates an empty polygon geometry.
     * @returns A newly allocated empty polygon geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyPolygon(): Ptr<GEOSGeometry>;

    /**
     * Creates a polygon geometry from linear ring geometries.
     * Note: The holes argument is an array of GEOSGeometry* objects. The caller **retains ownership** of the containing array, but the ownership of the pointed-to objects is transferred to the returned {@link GEOSGeometry}.
     * @param shell - A linear ring that is the exterior ring of the polygon.
     * @param holes - An array of linear rings that are the holes.
     * @param nholes - The number of rings in the holes array.
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createPolygon(shell: Ptr<GEOSGeometry>, holes: Ptr<GEOSGeometry[]>, nholes: u32): Ptr<GEOSGeometry>;

    /**
     * Creates a CircularString geometry.
     * @param s - Input coordinate sequence, ownership passes to the geometry
     * @returns A newly allocated CircularString geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createCircularString(s: Ptr<GEOSCoordSequence>): Ptr<GEOSGeometry>;

    /**
     * Creates an empty CircularString geometry.
     * @returns A newly allocated CircularString geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyCircularString(): Ptr<GEOSGeometry>;

    /**
     * Creates a CompoundCurve geometry.
     * @param curves - A list of geometries that will form the CompoundCurve
     * @param ncurves - The number of geometries in the curves list
     * @returns A newly allocated CompoundCurve geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createCompoundCurve(curves: Ptr<GEOSGeometry[]>, ncurves: u32): Ptr<GEOSGeometry>;

    /**
     * Creates an empty CompoundCurve geometry.
     * @returns A newly allocated CompoundCurve geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyCompoundCurve(): Ptr<GEOSGeometry>;

    /**
     * Creates a CurvePolygon geometry from ring geometries.
     * Note: The holes argument is an array of GEOSGeometry* objects. The caller **retains ownership** of the containing array, but the ownership of the pointed-to objects is transferred to the returned {@link GEOSGeometry}.
     * @param shell - A ring that is the exterior ring of the polygon.
     * @param holes - An array of rings that are the holes.
     * @param nholes - The number of rings in the holes array.
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createCurvePolygon(shell: Ptr<GEOSGeometry>, holes: Ptr<GEOSGeometry[]>, nholes: u32): Ptr<GEOSGeometry>;

    /**
     * Creates an empty CurvePolygon geometry.
     * @returns A newly allocated CurvePolygon geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyCurvePolygon(): Ptr<GEOSGeometry>;

    /**
     * Create a geometry collection.
     * Note: The geoms argument is an array of GEOSGeometry* objects. The caller **retains ownership** of the containing array, but the ownership of the pointed-to objects is transferred to the returned {@link GEOSGeometry}.
     * @param type - The geometry type, enumerated by GEOSGeomTypes
     * @param geoms - A list of geometries that will form the collection
     * @param ngeoms - The number of geometries in the geoms list
     * @returns A newly allocated geometry collection. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     */
    GEOSGeom_createCollection(type: i32, geoms: Ptr<GEOSGeometry[]>, ngeoms: u32): Ptr<GEOSGeometry>;

    /**
     * Release the sub-geometries of a collection for management. by the caller. The input collection remains as an empty collection, that the caller is responsible for destroying. The output geometries are also the responsibility of the caller, as is the containing array, which must be freed with {@link GEOSFree()}.
     * Note: The caller is responsible for freeing the returned array with {@link GEOSFree()} and all the elements with {@link GEOSGeom_destroy()}. If called with an empty collection, null will be returned and ngeoms set to zero.
     * @param collection - The collection that will have its components released.
     * @param ngeoms - A pointer to a variable that will be filled with the size of the output array.
     * @returns A newly allocated array of GEOSGeometry pointers.
     * @deprecated this function is not exported
     */
    GEOSGeom_releaseCollection(collection: Ptr<GEOSGeometry>, ngeoms: Ptr<u32>): Ptr<GEOSGeometry[]>;

    /**
     * Create an empty geometry collection.
     * @param type - The geometry type, enumerated by GEOSGeomTypes
     * @returns A newly allocated empty geometry collection. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_createEmptyCollection(type: i32): Ptr<GEOSGeometry>;

    /**
     * Create a rectangular polygon from bounding coordinates. Will return a point geometry if width and height are 0.
     * @param xmin - Left bound of envelope
     * @param ymin - Lower bound of envelope
     * @param xmax - Right bound of envelope
     * @param ymax - Upper bound of envelope
     * @deprecated this function is not exported
     */
    GEOSGeom_createRectangle(xmin: f64, ymin: f64, xmax: f64, ymax: f64): Ptr<GEOSGeometry>;

    /**
     * Create a new copy of the input geometry.
     * @param g - The geometry to copy
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     */
    GEOSGeom_clone(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Release the memory associated with a geometry.
     * @param g - The geometry to be destroyed.
     */
    GEOSGeom_destroy(g: Ptr<GEOSGeometry>): void;

    /**
     * Returns the geometry type string for this geometry. eg: "GeometryCollection", "LineString"
     * @param g - Input geometry
     * @returns A string with the geometry type. Caller must free with GEOSFree(). NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeomType(g: ConstPtr<GEOSGeometry>): Ptr<string>;

    /**
     * Returns the {@link GEOSGeomTypeId} number for this geometry.
     * @param g - Input geometry
     * @returns The geometry type number, or -1 on exception.
     */
    GEOSGeomTypeId(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Returns the "spatial reference id" (SRID) for this geometry.
     * @param g - Input geometry
     * @returns SRID number or 0 if unknown / not set.
     */
    GEOSGetSRID(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Return the anonymous "user data" for this geometry. User data must be managed by the caller, and is not freed when the geometry is destroyed.
     * @param g - Input geometry
     * @returns A void* to the user data, caller is responsible for casting to the appropriate type.
     * @deprecated this function is not exported
     */
    GEOSGeom_getUserData(g: ConstPtr<GEOSGeometry>): Ptr<void>;

    /**
     * Returns the number of sub-geometries immediately under a multi-geometry or collection or 1 for a simple geometry. For nested collections, remember to check if returned sub-geometries are **themselves** also collections. Empty collection or multi-geometry types return 0, and empty simple geometry types return 1.
     * @param g - Input geometry
     * @returns Number of direct children in this collection
     * @deprecated this function is not exported
     */
    GEOSGetNumGeometries(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Returns the specified sub-geometry of a collection. For a simple geometry, returns a pointer to the input. Returned object is a pointer to internal storage: it must NOT be destroyed directly.
     * Note: Up to GEOS 3.2.0 the input geometry must be a Collection, in later versions it doesn't matter (getGeometryN(0) for a single will return the input).
     * @param g - Input geometry
     * @param n - Sub-geometry index, zero-based
     * @returns A const GEOSGeometry, do not free! It will be freed when the parent is freed. Returns NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGetGeometryN(g: ConstPtr<GEOSGeometry>, n: i32): ConstPtr<GEOSGeometry>;

    /**
     * Read the currently set precision value from the geometry and returns the grid size if it is a fixed precision or 0.0 if it is full floating point precision.
     * @param g - Input geometry
     * @returns The grid size, or -1 on exception
     * @deprecated this function is not exported
     */
    GEOSGeom_getPrecision(g: ConstPtr<GEOSGeometry>): f64;

    /**
     * Returns the number of interior rings, for a Polygon input, or an exception otherwise.
     * @param g - Input Polygon geometry
     * @returns Number of interior rings, -1 on exception
     * @deprecated this function is not exported
     */
    GEOSGetNumInteriorRings(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Returns the number of points, for a LineString input, or an exception otherwise.
     * @param g - Input LineString geometry
     * @returns Number of points, -1 on exception
     * @deprecated this function is not exported
     */
    GEOSGeomGetNumPoints(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Returns the X coordinate, for a Point input, or an exception otherwise.
     * @param g (in) - Input Point geometry
     * @param x (out) - Pointer to hold return value
     * @returns 1 on success, 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeomGetX(g: ConstPtr<GEOSGeometry>, x: Ptr<f64>): i32;

    /**
     * Returns the Y coordinate, for a Point input, or an exception otherwise.
     * @param g (in) - Input Point geometry
     * @param y (out) - Pointer to hold return value
     * @returns 1 on success, 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeomGetY(g: ConstPtr<GEOSGeometry>, y: Ptr<f64>): i32;

    /**
     * Returns the Z coordinate, for a Point input, or an exception otherwise.
     * @param g (in) - Input Point geometry
     * @param z (out) - Pointer to hold return value
     * @returns 1 on success, 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeomGetZ(g: ConstPtr<GEOSGeometry>, z: Ptr<f64>): i32;

    /**
     * Returns the M coordinate, for a Point input, or an exception otherwise.
     * @param g (in) - Input Point geometry
     * @param m (out) - Pointer to hold return value
     * @returns 1 on success, 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeomGetM(g: ConstPtr<GEOSGeometry>, m: Ptr<f64>): i32;

    /**
     * Returns the N'th ring for a Polygon input.
     * Note: Returned object is a pointer to internal storage: it must NOT be destroyed directly.
     * @param g - Input Polygon geometry
     * @param n - Index of the desired ring
     * @returns LinearRing geometry. Owned by parent geometry, do not free. NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGetInteriorRingN(g: ConstPtr<GEOSGeometry>, n: i32): ConstPtr<GEOSGeometry>;

    /**
     * Get the external ring of a Polygon.
     * Note: Returned object is a pointer to internal storage: it must NOT be destroyed directly.
     * @param g - Input Polygon geometry
     * @returns LinearRing geometry. Owned by parent geometry, do not free. NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGetExteriorRing(g: ConstPtr<GEOSGeometry>): ConstPtr<GEOSGeometry>;

    /**
     * Get the total number of points in a geometry, of any type.
     * @param g - Input geometry
     * @returns Number of points in the geometry. -1 on exception.
     * @deprecated this function is not exported
     */
    GEOSGetNumCoordinates(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Return the coordinate sequence underlying the given geometry (Must be a LineString, LinearRing or Point). Do not directly free the coordinate sequence, it is owned by the parent geometry.
     * @param g - Input geometry
     * @returns Coordinate sequence or NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeom_getCoordSeq(g: ConstPtr<GEOSGeometry>): ConstPtr<GEOSCoordSequence>;

    /**
     * Return the planar dimensionality of the geometry.
     * - 0 for point, multipoint
     * - 1 for linestring, multilinestring
     * - 2 for polygon, multipolygon
     * @param g - Input geometry
     * @returns The dimensionality
     * @see geos::geom::Dimension::DimensionType
     * @deprecated this function is not exported
     */
    GEOSGeom_getDimensions(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Return the cartesian dimension of the geometry.
     * - 2 for XY data
     * - 3 for XYZ data
     * @param g - Input geometry
     * @returns The dimension
     * @deprecated this function is not exported
     */
    GEOSGeom_getCoordinateDimension(g: ConstPtr<GEOSGeometry>): i32;

    /**
     * Finds the minimum X value in the geometry.
     * @param g (in) - Input geometry
     * @param value (out) - Pointer to place result
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeom_getXMin(g: ConstPtr<GEOSGeometry>, value: Ptr<f64>): i32;

    /**
     * Finds the minimum Y value in the geometry.
     * @param g (in) - Input geometry
     * @param value (out) - Pointer to place result
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeom_getYMin(g: ConstPtr<GEOSGeometry>, value: Ptr<f64>): i32;

    /**
     * Finds the maximum X value in the geometry.
     * @param g (in) - Input geometry
     * @param value (out) - Pointer to place result
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeom_getXMax(g: ConstPtr<GEOSGeometry>, value: Ptr<f64>): i32;

    /**
     * Finds the maximum Y value in the geometry.
     * @param g (in) - Input geometry
     * @param value (out) - Pointer to place result
     * @returns 0 on exception
     * @deprecated this function is not exported
     */
    GEOSGeom_getYMax(g: ConstPtr<GEOSGeometry>, value: Ptr<f64>): i32;

    /**
     * Finds the extent (minimum and maximum X and Y value) of the geometry. Raises an exception for empty geometry input.
     * @param g (in) - Input geometry
     * @param xmin (out) - Pointer to place result for minimum X value
     * @param ymin (out) - Pointer to place result for minimum Y value
     * @param xmax (out) - Pointer to place result for maximum X value
     * @param ymax (out) - Pointer to place result for maximum Y value
     * @returns 1 on success, 0 on exception
     */
    GEOSGeom_getExtent(g: ConstPtr<GEOSGeometry>, xmin: Ptr<f64>, ymin: Ptr<f64>, xmax: Ptr<f64>, ymax: Ptr<f64>): i32;

    /**
     * Return the N'th point of a LineString
     * @param g - Input geometry, must be a LineString
     * @param n - Index of desired point (zero based)
     * @returns A Point geometry. Caller must free with GEOSGeom_destroy() NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeomGetPointN(g: ConstPtr<GEOSGeometry>, n: i32): Ptr<GEOSGeometry>;

    /**
     * Return the first point of a LineString
     * @param g - Input geometry, must be a LineString
     * @returns A Point geometry. Caller must free with GEOSGeom_destroy() NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeomGetStartPoint(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Return the last point of a LineString
     * @param g - Input geometry, must be a LineString
     * @returns A Point geometry. Caller must free with GEOSGeom_destroy() NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeomGetEndPoint(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Tests whether the input geometry is empty. If the geometry or any component is non-empty, the geometry is non-empty. An empty geometry has no boundary or interior.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     */
    GEOSisEmpty(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Tests whether the input geometry is a ring. Rings are linestrings, without self-intersections, with start and end point being identical.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSisRing(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Tests whether the input geometry has Z coordinates.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSHasZ(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Tests whether the input geometry has M coordinates.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSHasM(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Tests whether the input geometry is closed. A closed geometry is a linestring or multilinestring with the start and end points being the same.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSisClosed(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Set the "spatial reference id" (SRID) for this geometry.
     * @param g - Input geometry
     * @param SRID - SRID number or 0 for unknown SRID.
     */
    GEOSSetSRID(g: Ptr<GEOSGeometry>, SRID: i32): void;

    /**
     * Set the anonymous "user data" for this geometry.
     * @param g - Input geometry
     * @param userData - Void pointer to user data
     * @deprecated this function is not exported
     */
    GEOSGeom_setUserData(g: Ptr<GEOSGeometry>, userData: Ptr<void>): void;

    /**
     * Organize the elements, rings, and coordinate order of geometries in a consistent way, so that geometries that represent the same object can be easily compared. Modifies the geometry in-place.
     * Normalization ensures the following:
     * - Lines are oriented to have smallest coordinate first (apart from duplicate endpoints)
     * - Rings start with their smallest coordinate (using XY ordering)
     * - Polygon shell rings are oriented CW, and holes CCW
     * - Collection elements are sorted by their first coordinate
     * Use before calling {@link GEOSEqualsExact} to avoid false "not equal" results.
     * @param g - Input geometry
     * @returns 0 on success or -1 on exception
     */
    GEOSNormalize(g: Ptr<GEOSGeometry>): i32;

    /**
     * Enforce a ring orientation on all polygonal elements in the input geometry. Non-polygonal geometries will not be modified.
     * @param g - Input geometry
     * @param exteriorCW - if 1, exterior rings will be clockwise and interior rings will be counter-clockwise
     * @returns 0 on success or -1 on exception
     */
    GEOSOrientPolygons(g: Ptr<GEOSGeometry>, exteriorCW: i32): i32;

    /**
     * Tests whether the input geometry is "simple". Mostly relevant for linestrings. A "simple" linestring has no self-intersections.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     */
    GEOSisSimple(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Check the validity of the provided geometry.
     * - All points are valid.
     * - All non-zero-length linestrings are valid.
     * - Polygon rings must be non-self-intersecting, and interior rings contained within exterior rings.
     * - Multi-polygon components may not touch or overlap.
     * @param g - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSisValid(g: ConstPtr<GEOSGeometry>): i8;

    /**
     * Return the human readable reason a geometry is invalid, "Valid Geometry" string otherwise, or NULL on exception.
     * @param g - The geometry to test
     * @returns A string with the reason, NULL on exception. Caller must GEOSFree() their result.
     * @deprecated this function is not exported
     */
    GEOSisValidReason(g: ConstPtr<GEOSGeometry>): Ptr<string>;

    /**
     * In one step, calculate and return the validity, the human readable validity reason and a point at which validity rules are broken. Caller has the responsibility to destroy 'reason' with {@link GEOSFree()} and 'location' with {@link GEOSGeom_destroy()}
     * @param g - The geometry to test
     * @param flags - A value from the GEOSValidFlags enum
     * @param reason - A pointer in which the reason string will be places
     * @param location - A pointer in which the location GEOSGeometry will be placed
     * @returns 1 when valid, 0 when invalid, 2 on exception
     */
    GEOSisValidDetail(g: ConstPtr<GEOSGeometry>, flags: i32, reason: Ptr<string[]>, location: Ptr<GEOSGeometry[]>): i8;

    /**
     * Repair an invalid geometry, returning a valid output.
     * @param g - The geometry to repair
     * @returns The repaired geometry. Caller must free with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSMakeValid(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Repair an invalid geometry, returning a valid output, using the indicated GEOSMakeValidMethods algorithm and options.
     * @param g - is the geometry to test.
     * @param makeValidParams - is a GEOSMakeValidParams with the desired parameters set on it.
     * @returns A repaired geometry. Caller must free with GEOSGeom_destroy().
     * @see GEOSMakeValidParams_create
     * @see GEOSMakeValidParams_destroy
     * @see GEOSMakeValidParams_setMethod
     * @see GEOSMakeValidParams_setKeepCollapsed
     */
    GEOSMakeValidWithParams(g: ConstPtr<GEOSGeometry>, makeValidParams: ConstPtr<GEOSMakeValidParams>): Ptr<GEOSGeometry>;

    /**
     * Create a GEOSMakeValidParams to hold the desired parameters to control the algorithm and behavior of the validation process.
     * @returns a parameter object
     * @see GEOSMakeValidWithParams
     */
    GEOSMakeValidParams_create(): Ptr<GEOSMakeValidParams>;

    /**
     * Destroy a GEOSMakeValidParams.
     * @param parms - the object to destroy
     * @see GEOSMakeValidWithParams
     * @deprecated this function is not exported
     */
    GEOSMakeValidParams_destroy(parms: Ptr<GEOSMakeValidParams>): void;

    /**
     * Set the GEOSMakeValidMethods to use in making the geometry valid.
     * @returns 0 on exception, 1 on success.
     * @see GEOSMakeValidWithParams
     */
    GEOSMakeValidParams_setMethod(p: Ptr<GEOSMakeValidParams>, method: GEOSMakeValidMethods): i32;

    /**
     * When this parameter is nn-zero, the GEOS_MAKE_VALID_STRUCTURE method will keep components that have collapsed into a lower dimensionality. For example, a ring collapsing to a line, or a line collapsing to a point.
     * @returns 0 on exception, 1 on success.
     * @see GEOSMakeValidWithParams
     */
    GEOSMakeValidParams_setKeepCollapsed(p: Ptr<GEOSMakeValidParams>, keepCollapsed: i32): i32;

    /**
     * Computes the minimum clearance of a geometry. The minimum clearance is the smallest amount by which a vertex could be move to produce an invalid polygon, a non-simple linestring, or a multipoint with repeated points. If a geometry has a minimum clearance of 'eps', it can be said that:
     * - No two distinct vertices in the geometry are separated by less than 'eps'
     * - No vertex is closer than 'eps' to a line segment of which it is not an endpoint.
     * If the minimum clearance cannot be defined for a geometry (such as with a single point, or a multipoint whose points are identical, a value of Infinity will be calculated.
     * @param g - the input geometry
     * @param d - a double to which the result can be stored
     * @returns 0 if no exception occurred. 2 if an exception occurred.
     * @see geos::precision::MinimumClearance
     * @deprecated this function is not exported
     */
    GEOSMinimumClearance(g: ConstPtr<GEOSGeometry>, d: Ptr<f64>): i32;

    /**
     * Returns a LineString whose endpoints define the minimum clearance of a geometry. If the geometry has no minimum clearance, an empty LineString will be returned.
     * @param g - the input geometry
     * @returns a linestring geometry, or NULL if an exception occurred. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::precision::MinimumClearance
     * @deprecated this function is not exported
     */
    GEOSMinimumClearanceLine(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Works from start of each coordinate sequence in the geometry, retaining points that are further away from the previous retained point than the tolerance value.
     * Removing repeated points with a non-zero tolerance may result in an invalid geometry being returned. Be sure to check and repair validity.
     * @param g - The geometry to filter
     * @param tolerance - Remove all points within this distance of each other. Use 0.0 to remove only exactly repeated points.
     * @returns A geometry with all points within the tolerance of each other removed.
     * @see GEOSMakeValidWithParams
     * @deprecated this function is not exported
     */
    GEOSRemoveRepeatedPoints(g: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Calculate the area of a geometry.
     * @param g (in) - Input geometry
     * @param area (out) - Pointer to be filled in with area result
     * @returns 1 on success, 0 on exception.
     */
    GEOSArea(g: ConstPtr<GEOSGeometry>, area: Ptr<f64>): i32;

    /**
     * Calculate the length of a geometry.
     * @param g (in) - Input geometry
     * @param length (out) - Pointer to be filled in with length result
     * @returns 1 on success, 0 on exception.
     */
    GEOSLength(g: ConstPtr<GEOSGeometry>, length: Ptr<f64>): i32;

    /**
     * Calculate the length of a LineString. Only works for LineString inputs, returns exception otherwise.
     * @param g (in) - Input geometry
     * @param length (out) - Pointer to be filled in with length result
     * @returns 1 on success, 0 on exception.
     * @deprecated this function is not exported
     */
    GEOSGeomGetLength(g: ConstPtr<GEOSGeometry>, length: Ptr<f64>): i32;

    /**
     * Calculate the distance between two geometries.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     */
    GEOSDistance(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, dist: Ptr<f64>): i32;

    /**
     * Test whether the distance between two geometries is within the given dist.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @param dist - The max distance
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSDistanceWithin(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, dist: f64): i8;

    /**
     * Calculate the distance between two geometries, using the indexed facet distance, which first indexes the geometries internally, then calculates the distance. Useful when one or both geometries is very large.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     * @see geos::operation::distance
     * @deprecated this function is not exported
     */
    GEOSDistanceIndexed(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, dist: Ptr<f64>): i32;

    /**
     * The closest points of the two geometries. The first point comes from g1 geometry and the second point comes from g2.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @returns A coordinate sequence with the two points, or NULL on exception. Caller must free with GEOSCoordSeq_destroy().
     */
    GEOSNearestPoints(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<GEOSCoordSequence>;

    /**
     * Calculate the Hausdorff distance between two geometries. {@link https://en.wikipedia.org/wiki/Hausdorff_distance|Hausdorff distance} is the largest distance between two geometries.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     * @see geos::algorithm::distance::DiscreteHausdorffDistance
     */
    GEOSHausdorffDistance(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, dist: Ptr<f64>): i32;

    /**
     * Calculate a more precise Hausdorff distance between two geometries, by densifying the inputs before computation. {@link https://en.wikipedia.org/wiki/Hausdorff_distance|Hausdorff distance} is the largest distance between two geometries.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param densifyFrac (in) - The largest % of the overall line length that any given two-point segment should be
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     * @see geos::algorithm::distance::DiscreteHausdorffDistance
     */
    GEOSHausdorffDistanceDensify(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, densifyFrac: f64, dist: Ptr<f64>): i32;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/Fr%C3%A9chet_distance|Frechet distance} between two geometries, a similarity measure for linear features.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     * @see geos::algorithm::distance::DiscreteFrechetDistance
     */
    GEOSFrechetDistance(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, dist: Ptr<f64>): i32;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/Fr%C3%A9chet_distance|Frechet distance} between two geometries, a similarity measure for linear features. The inputs can be densified to provide a more accurate result.
     * @param g1 (in) - Input geometry
     * @param g2 (in) - Input geometry
     * @param densifyFrac (in) - The largest % of the overall line length that any given two-point segment should be
     * @param dist (out) - Pointer to be filled in with distance result
     * @returns 1 on success, 0 on exception.
     * @see geos::algorithm::distance::DiscreteFrechetDistance
     */
    GEOSFrechetDistanceDensify(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, densifyFrac: f64, dist: Ptr<f64>): i32;

    /**
     * Distance of point projected onto line from the start of the line.
     * Note: Line parameter must be a LineString.
     * @param line - linear target of projection
     * @param point - point to be projected onto 'g'
     * @returns distance along line that point projects to, -1 on exception
     * @deprecated this function is not exported
     */
    GEOSProject(line: ConstPtr<GEOSGeometry>, point: ConstPtr<GEOSGeometry>): f64;

    /**
     * Measuring from start of line, return point that is distance the start. Line parameter must be a LineString. The returned point is not guaranteed to intersect the line due to limitations of floating point calculations.
     * @param line - linear target of projection
     * @param d - distance from start of line to created point
     * @returns The point GEOSGeometry that is distance from the start of line. Caller takes ownership of returned geometry.
     * @deprecated this function is not exported
     */
    GEOSInterpolate(line: ConstPtr<GEOSGeometry>, d: f64): Ptr<GEOSGeometry>;

    /**
     * Project point to line and calculate the **proportion** of the line the point is from the start. For example, a point that projects to the middle of a line would be return 0.5.
     * @param line - linear target of projection
     * @param point - the point to project
     * @returns The proportion of the overall line length that the projected point falls at.
     * @deprecated this function is not exported
     */
    GEOSProjectNormalized(line: ConstPtr<GEOSGeometry>, point: ConstPtr<GEOSGeometry>): f64;

    /**
     * Measuring from start of line, return point that is a proportion the start. Line parameter must be a LineString.
     * @param line - linear target of projection
     * @param proportion - The proportion from the start of line to created point
     * @returns The point GEOSGeometry that is distance from the start of line. Caller takes ownership of returned geometry.
     * @deprecated this function is not exported
     */
    GEOSInterpolateNormalized(line: ConstPtr<GEOSGeometry>, proportion: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the intersection of two geometries: the set of points that fall within **both** geometries.
     * @param g1 - one of the geometries
     * @param g2 - the other geometry
     * @returns A newly allocated geometry of the intersection. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSIntersection(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the intersection of two geometries: the set of points that fall within **both** geometries. All the vertices of the output geometry must fall on the grid defined by the gridSize, and the output will be a valid geometry.
     * @param g1 - one of the geometries
     * @param g2 - the other geometry
     * @param gridSize - the cell size of the precision grid
     * @returns A newly allocated geometry of the intersection. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSIntersectionPrec(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, gridSize: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the difference of two geometries A and B: the set of points that fall within A but **not** within B.
     * @param ga - the base geometry
     * @param gb - the geometry to subtract from it
     * @returns A newly allocated geometry of the difference. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSDifference(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the difference of two geometries A and B: the set of points that fall within A but **not** within B. All the vertices of the output geometry must fall on the grid defined by the gridSize, and the output will be a valid geometry.
     * @param ga - one of the geometries
     * @param gb - the other geometry
     * @param gridSize - the cell size of the precision grid
     * @returns A newly allocated geometry of the difference. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSDifferencePrec(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>, gridSize: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the symmetric difference of two geometries A and B: the set of points that fall in A but **not** within B and the set of points that fall in B but **not** in A.
     * @param ga - geometry A
     * @param gb - geometry B
     * @returns A newly allocated geometry of the symmetric difference. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSSymDifference(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the symmetric difference of two geometries A and B: the set of points that fall in A but **not** within B and the set of points that fall in B but **not** in A. All the vertices of the output geometry must fall on the grid defined by the gridSize, and the output will be a valid geometry.
     * @param ga - one of the geometries
     * @param gb - the other geometry
     * @param gridSize - the cell size of the precision grid
     * @returns A newly allocated geometry of the symmetric difference. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSSymDifferencePrec(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>, gridSize: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the union of two geometries A and B: the set of points that fall in A **or** within B.
     * @param ga - geometry A
     * @param gb - geometry B
     * @returns A newly allocated geometry of the union. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSUnion(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the union of two geometries A and B: the set of points that fall in A **or** within B. All the vertices of the output geometry must fall on the grid defined by the gridSize, and the output will be a valid geometry.
     * @param ga - one of the geometries
     * @param gb - the other geometry
     * @param gridSize - the cell size of the precision grid
     * @returns A newly allocated geometry of the union. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSUnionPrec(ga: ConstPtr<GEOSGeometry>, gb: ConstPtr<GEOSGeometry>, gridSize: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the union of all components of a single geometry. Usually used to convert a collection into the smallest set of polygons that cover the same area.
     * @param g - The input geometry
     * @returns A newly allocated geometry of the union. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSUnaryUnion(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the union of all components of a single geometry. Usually used to convert a collection into the smallest set of polygons that cover the same area. All the vertices of the output geometry must fall on the grid defined by the gridSize, and the output will be a valid geometry.
     * @param g - input geometry
     * @param gridSize - the cell size of the precision grid
     * @returns A newly allocated geometry of the union. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     */
    GEOSUnaryUnionPrec(g: ConstPtr<GEOSGeometry>, gridSize: f64): Ptr<GEOSGeometry>;

    /**
     * Optimized union algorithm for inputs that can be divided into subsets that do not intersect. If there is only one such subset, performance can be expected to be worse than GEOSUnionaryUnion.
     * @param g - The input geometry
     * @returns A newly allocated geometry of the union, or NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSDisjointSubsetUnion(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Intersection optimized for a rectangular clipping polygon. Supposed to be faster than using {@link GEOSIntersection()}. Not guaranteed to return valid results.
     * @param g - The input geometry to be clipped
     * @param xmin - Left bound of clipping rectangle
     * @param ymin - Lower bound of clipping rectangle
     * @param xmax - Right bound of clipping rectangle
     * @param ymax - Upper bound of clipping rectangle
     * @returns The clipped geometry or NULL on exception Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::intersection::RectangleIntersection
     * @deprecated this function is not exported
     */
    GEOSClipByRect(g: ConstPtr<GEOSGeometry>, xmin: f64, ymin: f64, xmax: f64, ymax: f64): Ptr<GEOSGeometry>;

    /**
     * Find paths shared between the two given lineal geometries.
     * Returns a GeometryCollection having two elements:
     * - first element is a MultiLineString containing shared paths having the same direction on both inputs
     * - second element is a MultiLineString containing shared paths having the opposite direction on the two inputs
     * @param g1 - An input geometry
     * @param g2 - An input geometry
     * @returns The shared paths Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::sharedpaths::SharedPathsOp
     * @deprecated this function is not exported
     */
    GEOSSharedPaths(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Buffer a geometry.
     * @param g - The input geometry to be buffered.
     * @param width - The distance by which to expand the geometry (or contract) if the value is negative.
     * @param quadsegs - The number of segments per quadrant to generate. More segments provides a more "precise" buffer at the expense of size.
     * @returns A GEOSGeometry of the buffered result. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSBuffer(g: ConstPtr<GEOSGeometry>, width: f64, quadsegs: i32): Ptr<GEOSGeometry>;

    /**
     * Create a default GEOSBufferParams object for controlling the shape of buffered generated by {@link GEOSBuffer}.
     * @returns A newly allocated GEOSBufferParams. NULL on exception. Caller is responsible for freeing with GEOSBufferParams_destroy().
     */
    GEOSBufferParams_create(): Ptr<GEOSBufferParams>;

    /**
     * Destroy a GEOSBufferParams and free all associated memory.
     * @param parms - The object to destroy.
     * @deprecated this function is not exported
     */
    GEOSBufferParams_destroy(parms: Ptr<GEOSBufferParams>): void;

    /**
     * Set the end cap type of a GEOSBufferParams to the desired style, which must be one enumerated in {@link GEOSBufCapStyles}.
     * @returns 0 on exception, 1 on success.
     */
    GEOSBufferParams_setEndCapStyle(p: Ptr<GEOSBufferParams>, style: i32): i32;

    /**
     * Set the join type of a GEOSBufferParams to the desired style, which must be one enumerated in {@link GEOSBufJoinStyles}.
     * @returns 0 on exception, 1 on success.
     */
    GEOSBufferParams_setJoinStyle(p: Ptr<GEOSBufferParams>, joinStyle: i32): i32;

    /**
     * Set the mitre limit of a GEOSBufferParams to the desired size. For acute angles, a mitre join can extend very very far from the input geometry, which is probably not desired. The mitre limit places an upper bound on that.
     * @param p - The GEOSBufferParams to operate on
     * @param mitreLimit - The limit to set
     * @returns 0 on exception, 1 on success.
     */
    GEOSBufferParams_setMitreLimit(p: Ptr<GEOSBufferParams>, mitreLimit: f64): i32;

    /**
     * Set the number of segments to use to stroke each quadrant of circular arcs generated by the buffering process. More segments means a smoother output, but with larger size.
     * @param p - The GEOSBufferParams to operate on
     * @param quadSegs - Number of segments per quadrant
     * @returns 0 on exception, 1 on success.
     */
    GEOSBufferParams_setQuadrantSegments(p: Ptr<GEOSBufferParams>, quadSegs: i32): i32;

    /**
     * Sets whether the computed buffer should be single-sided. A single-sided buffer is constructed on only one side of each input line.
     * @param p - The GEOSBufferParams to operate on
     * @param singleSided - Set to 1 for single-sided output 0 otherwise
     * @returns 0 on exception, 1 on success.
     * @see geos::operation::buffer::BufferParameters::setSingleSided
     */
    GEOSBufferParams_setSingleSided(p: Ptr<GEOSBufferParams>, singleSided: i32): i32;

    /**
     * Generates a buffer using the special parameters in the GEOSBufferParams
     * @param g - The geometry to buffer
     * @param p - The parameters to apply to the buffer process
     * @param width - The buffer distance
     * @returns The buffered geometry, or NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     */
    GEOSBufferWithParams(g: ConstPtr<GEOSGeometry>, p: ConstPtr<GEOSBufferParams>, width: f64): Ptr<GEOSGeometry>;

    /**
     * Generate a buffer using the provided style parameters.
     * @param g - The geometry to buffer
     * @param width - Width of the buffer
     * @param quadsegs - Number of segments per quadrant
     * @param endCapStyle - See GEOSBufCapStyles
     * @param joinStyle - See GEOSBufJoinStyles
     * @param mitreLimit - See GEOSBufferParams_setMitreLimit
     * @returns The buffered geometry, or NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSBufferWithStyle(g: ConstPtr<GEOSGeometry>, width: f64, quadsegs: i32, endCapStyle: i32, joinStyle: i32, mitreLimit: f64): Ptr<GEOSGeometry>;

    /**
     * Generates offset curve line(s) for a geometry. Handles all geometry types as input.
     * - For a LineString the result is a LineString.
     * - For a Point the result is an empty LineString.
     * - For a Polygon the result is the boundary lines(s) of the polygon buffered to the offset distance (which may be a MultiLineString).
     * - For a collection the result is a collection of the element offset curves.
     * @param g - The linear geometry to offset from
     * @param width - Distance to offset from the curve. Negative for a right-side offset. Positive for a left-side offset.
     * @param quadsegs - Number of segments per quadrant
     * @param joinStyle - See GEOSBufJoinStyles
     * @param mitreLimit - See GEOSBufferParams_setMitreLimit
     * @returns The offset geometry. Returns NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::buffer::BufferBuilder::bufferLineSingleSided
     * @deprecated this function is not exported
     */
    GEOSOffsetCurve(g: ConstPtr<GEOSGeometry>, width: f64, quadsegs: i32, joinStyle: i32, mitreLimit: f64): Ptr<GEOSGeometry>;

    /**
     * Optimized union algorithm for polygonal inputs that are correctly noded and do not overlap. It may generate an error (return NULL) for inputs that do not satisfy this constraint, however this is not guaranteed.
     * @param g - The input geometry
     * @returns A geometry that covers all the points of the input geometry. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSCoverageUnion(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Analyze a coverage (represented as a collection of polygonal geometry with exactly matching edge geometry) to find places where the assumption of exactly matching edges is not met.
     * @param input - The polygonal coverage to access, stored in a geometry collection. All members must be POLYGON or MULTIPOLYGON.
     * @param gapWidth - The maximum width of gaps to detect.
     * @param invalidEdges - When there are invalidities in the coverage, this pointer will be set with a geometry collection of the same length as the input, with a MULTILINESTRING of the error edges for each invalid polygon, or an EMPTY where the polygon is a valid participant in the coverage. Pass NULL if you do not want the invalid edges returned.
     * @returns A value of 1 for a valid coverage, 0 for invalid and 2 for an exception or error. Invalidity includes polygons that overlap, that have gaps smaller than the gapWidth, or non-polygonal entries in the input collection.
     * @deprecated this function is not exported
     */
    GEOSCoverageIsValid(input: ConstPtr<GEOSGeometry>, gapWidth: f64, invalidEdges: Ptr<GEOSGeometry[]>): i32;

    /**
     * Operates on a coverage (represented as a list of polygonal geometry with exactly matching edge geometry) to apply a Visvalingam–Whyatt simplification to the edges, reducing complexity in proportion with the provided tolerance, while retaining a valid coverage (no edges will cross or touch after the simplification). Geometries never disappear, but they may be simplified down to just a triangle. Also, some invalid geoms (such as Polygons which have too few non-repeated points) will be returned unchanged. If the input dataset is not a valid coverage due to overlaps, it will still be simplified, but invalid topology such as crossing edges will still be invalid.
     * @param input - The polygonal coverage to access, stored in a geometry collection. All members must be POLYGON or MULTIPOLYGON.
     * @param tolerance - A tolerance parameter in linear units.
     * @param preserveBoundary - Use 1 to preserve the outside edges of the coverage without simplification, 0 to allow them to be simplified.
     * @returns A collection containing the simplified geometries, or null on error.
     * @deprecated this function is not exported
     */
    GEOSCoverageSimplifyVW(input: ConstPtr<GEOSGeometry>, tolerance: f64, preserveBoundary: i32): Ptr<GEOSGeometry>;

    /**
     * For linear inputs, returns a new geometry in which no lines cross each other, and all touching occurs at end points.
     * @param g - The input geometry
     * @returns The noded geometry or NULL on exception Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSNode(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Polygonizes a set of Geometries which contain linework that represents the edges of a planar graph.
     * All types of Geometry are accepted as input; the constituent linework is extracted as the edges to be polygonized.
     * The edges must be correctly noded; that is, they must only meet at their endpoints and not overlap anywhere. If your edges are not already noded, run them through {@link GEOSUnaryUnion()} first. Polygonization will accept incorrectly noded input but will not form polygons from non-noded edges, and reports them as errors.
     * The Polygonizer reports the following kinds of errors:
     * - Dangles - edges which have one or both ends which are not incident on another edge endpoint
     * - Cut Edges - edges which are connected at both ends but which do not form part of a polygon
     * - Invalid Ring Lines - edges which form rings which are invalid (e.g. the component lines contain a self-intersection)
     * Errors are reported to output parameters "cuts", "dangles" and "invalid" (if not-null). Formed polygons are returned as a collection. NULL is returned on exception. All returned geometries must be destroyed by caller.
     * The {@link GEOSPolygonize_valid()} variant allows extracting only polygons which form a valid polygonal result. The set of extracted polygons is guaranteed to be edge-disjoint. This is useful when it is known that the input lines form a valid polygonal geometry (which may include holes or nested polygons).
     * @param geoms - Array of linear geometries to polygons. Caller retains ownersihp of both array container and objects.
     * @param ngeoms - Size of the geoms array.
     * @returns The polygonal output geometry. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::polygonize::Polygonizer
     * @deprecated this function is not exported
     */
    GEOSPolygonize(geoms: ConstPtr<GEOSGeometry[]>, ngeoms: u32): Ptr<GEOSGeometry>;

    /**
     * Has the same polygonizing behavior as {@link GEOSPolygonize()}, but returns a result which is a valid polygonal geometry. The result will not contain any edge-adjacent elements.
     * @param geoms - Array of linear geometries to polygons. Caller retains ownersihp of both array container and objects.
     * @param ngeoms - Size of the geoms array.
     * @returns The polygonal output geometry. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::polygonize::Polygonizer
     * @see GEOSBuildArea()
     * @deprecated this function is not exported
     */
    GEOSPolygonize_valid(geoms: ConstPtr<GEOSGeometry[]>, ngeoms: u32): Ptr<GEOSGeometry>;

    /**
     * Perform the polygonization as {@link GEOSPolygonize()} but return only the "cut edges", the linear features that are connected at both ends, do _not_ participate in the final polygon.
     * @param geoms - Array of linear geometries to polygons. Caller retains ownersihp of both array container and objects.
     * @param ngeoms - Size of the geoms array.
     * @returns The "cut edges" Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::polygonize::Polygonizer
     * @deprecated this function is not exported
     */
    GEOSPolygonizer_getCutEdges(geoms: ConstPtr<GEOSGeometry[]>, ngeoms: u32): Ptr<GEOSGeometry>;

    /**
     * Perform the polygonization as {@link GEOSPolygonize()} and return the polygonal result as well as all extra outputs.
     * @param input (in) - A single geometry with all the input lines to polygonize.
     * @param cuts (out) - Pointer to hold "cut edges", connected on both ends but not part of output. Caller must free.
     * @param dangles (out) - Pointer to hold "dangles", connected one end but not part of output. Caller must free.
     * @param invalid (out) - Pointer to hold invalid outputs, polygons formed but not valid. Caller must free.
     * @returns The polygonal valid output Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::polygonize::Polygonizer
     * @deprecated this function is not exported
     */
    GEOSPolygonize_full(input: ConstPtr<GEOSGeometry>, cuts: Ptr<GEOSGeometry[]>, dangles: Ptr<GEOSGeometry[]>, invalid: Ptr<GEOSGeometry[]>): Ptr<GEOSGeometry>;

    /**
     * Perform a polygonization using all the linework, assuming that rings contained within rings are empty holes, rather then extra polygons.
     * @param g - The input linework
     * @returns The polygonal output Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::polygonize::BuildArea
     * @deprecated this function is not exported
     */
    GEOSBuildArea(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Densifies a geometry using a given distance tolerance. Additional vertices will be added to every line segment that is greater this tolerance; these vertices will evenly subdivide that segment. Only linear components of input geometry are densified.
     * @param g - The geometry to densify
     * @param tolerance - the distance tolerance to densify
     * @returns The densified geometry, or NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSDensify(g: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Merges a set of LineStrings, joining them at nodes which have cardinality 2. Lines may have their direction reversed.
     * @param g - The input linework
     * @returns The merged linework. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::linemerge::LineMerger
     * @deprecated this function is not exported
     */
    GEOSLineMerge(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Merges a set of LineStrings, joining them at nodes which have cardinality 2. and where the lines have the same direction. This means that lines do not have their direction reversed.
     * @param g - The input linework
     * @returns The merged linework. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::linemerge::LineMerger
     * @deprecated this function is not exported
     */
    GEOSLineMergeDirected(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Computes the line which is the section of the input LineString starting and ending at the given length fractions.
     * @param g - The input LineString
     * @param start_fraction - start fraction (0-1) along the length of g
     * @param end_fraction - end fraction (0-1) along the length of g
     * @returns selected substring. Caller is responsible for freeing with GEOSGeom_destroy()
     * @deprecated this function is not exported
     */
    GEOSLineSubstring(g: ConstPtr<GEOSGeometry>, start_fraction: f64, end_fraction: f64): Ptr<GEOSGeometry>;

    /**
     * For geometries with coordinate sequences, reverses the order of the sequences. Converts CCW rings to CW. Reverses direction of LineStrings.
     * @param g - The input geometry
     * @returns The reversed geometry Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSReverse(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Apply the {@link https://en.wikipedia.org/wiki/Ramer–Douglas–Peucker_algorithm|Douglas/Peucker algorithm} to the coordinate sequences of the input geometry. Removes "unnecessary" vertices, vertices that are co-linear within the tolerance distance.
     * @param g - The input geometry
     * @param tolerance - The tolerance to apply. Larger tolerance leads to simpler output.
     * @returns The simplified geometry Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::simplify::DouglasPeuckerSimplifier
     * @deprecated this function is not exported
     */
    GEOSSimplify(g: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Apply the {@link https://en.wikipedia.org/wiki/Ramer–Douglas–Peucker_algorithm|Douglas/Peucker algorithm} to the coordinate sequences of the input geometry. Removes "unnecessary" vertices, vertices that are co-linear within the tolerance distance. Returns a valid output geometry, checking for collapses, ring-intersections, etc and attempting to avoid. More computationally expensive than {@link GEOSSimplify()}
     * @param g - The input geometry
     * @param tolerance - The tolerance to apply. Larger tolerance leads to simpler output.
     * @returns The simplified geometry Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::simplify::DouglasPeuckerSimplifier
     * @deprecated this function is not exported
     */
    GEOSTopologyPreserveSimplify(g: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Return all distinct vertices of input geometry as a MultiPoint. Note that only 2 dimensions of the vertices are considered when testing for equality.
     * @param g - The input geometry
     * @returns The distinct points Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_extractUniquePoints(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/Hilbert_curve|Hilbert code} of the centroid of a geometry relative to an extent. This allows sorting geometries in a deterministic way, such that similar Hilbert codes are likely to be near each other in two-dimensional space. The caller must ensure that the geometry is contained within the extent.
     * @param geom (in) - Input geometry, must be non-empty
     * @param extent (in) - Extent within which to calculate the Hilbert code for geom
     * @param level (in) - The level of precision of the Hilbert curve, up to 16
     * @param code (out) - Pointer to be filled in with Hilbert code result
     * @returns 1 on success, 0 on exception.
     * @deprecated this function is not exported
     */
    GEOSHilbertCode(geom: ConstPtr<GEOSGeometry>, extent: ConstPtr<GEOSGeometry>, level: u32, code: Ptr<u32>): i32;

    /**
     * Apply XY coordinate transform callback to all coordinates in a copy of input geometry. If the callback returns an error, returned geometry will be NULL. Z values, if present, are not modified by this function.
     * @param g (in) - Input geometry
     * @param callback (in) - a function to be executed for each coordinate in the geometry. The callback takes 3 parameters: x and y coordinate values to be updated and a void userdata pointer.
     * @param userdata - an optional pointer to pe passed to 'callback' as an argument
     * @returns a copy of the input geometry with transformed coordinates. Caller must free with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSGeom_transformXY(g: ConstPtr<GEOSGeometry>, callback: Ptr<GEOSTransformXYCallback>, userdata: Ptr<void>): Ptr<GEOSGeometry>;

    /**
     * Snaps the vertices and segments of the first geometry to vertices of the second geometry within the given tolerance.
     * Where possible, this operation tries to avoid creating invalid geometries; however, it does not guarantee that output geometries will be valid. It is the responsibility of the caller to check for and handle invalid geometries.
     * Because too much snapping can result in invalid topology being created, heuristics are used to determine the number and location of snapped vertices that are likely safe to snap. These heuristics may omit some potential snaps that are otherwise within the tolerance.
     * @param input - An input geometry
     * @param snap_target - A geometry to snap the input to
     * @param tolerance - Snapping tolerance
     * @returns The snapped version of the input. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSSnap(input: ConstPtr<GEOSGeometry>, snap_target: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Change the coordinate precision of a geometry. This will affect the precision of the existing geometry as well as any geometries derived from this geometry using overlay functions. The output will be a valid {@link GEOSGeometry}.
     * Note that operations will always be performed in the precision of the geometry with higher precision (smaller "gridSize"). That same precision will be attached to the operation outputs.
     * In the Default and GEOS_PREC_KEEP_COLLAPSED modes invalid input may cause an error to occur, unless the invalidity is below the scale of the requested precision
     * There are only 3 modes. The GEOS_PREC_NO_TOPO mode takes precedence over GEOS_PREC_KEEP_COLLAPSED. So the combination GEOS_PREC_NO_TOPO || GEOS_PREC_KEEP_COLLAPSED has the same semantics as GEOS_PREC_NO_TOPO
     * @param g - Input geometry
     * @param gridSize - cell size of grid to round coordinates to, or 0 for FLOATING precision
     * @param flags - The bitwise OR of members of the GEOSPrecisionRules enum
     * @returns The precision reduced result. Caller must free with GEOSGeom_destroy() NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSGeom_setPrecision(g: ConstPtr<GEOSGeometry>, gridSize: f64, flags: i32): Ptr<GEOSGeometry>;

    /**
     * True if no point of either geometry touchess or is within the other.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::disjoint
     * @deprecated this function is not exported
     */
    GEOSDisjoint(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometries share boundaries at one or more points, but do not have interior overlaps.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::touches
     * @deprecated this function is not exported
     */
    GEOSTouches(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometries are not disjoint.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::intersects
     * @deprecated this function is not exported
     */
    GEOSIntersects(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometries interiors interact but their boundaries do not. Most useful for finding line crosses cases.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::crosses
     * @deprecated this function is not exported
     */
    GEOSCrosses(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometry g1 is completely within g2, and not touching the boundary of g2.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::within
     * @deprecated this function is not exported
     */
    GEOSWithin(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometry g2 is completely within g1.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::contains
     * @deprecated this function is not exported
     */
    GEOSContains(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometries share interiors but are neither within nor contained.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::overlaps
     * @deprecated this function is not exported
     */
    GEOSOverlaps(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometries cover the same space on the plane.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::equals
     * @deprecated this function is not exported
     */
    GEOSEquals(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometry g1 is completely within g2, including possibly touching the boundary of g2.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::covers
     * @deprecated this function is not exported
     */
    GEOSCovers(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * True if geometry g2 is completely within g1, including possibly touching the boundary of g1.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::coveredBy
     * @deprecated this function is not exported
     */
    GEOSCoveredBy(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Determine pointwise equivalence of two geometries, by checking that they have identical structure and that each vertex of g2 is within the distance tolerance of the corresponding vertex in g1. Z and M values are ignored by GEOSEqualsExact, and this function may return true for inputs with different dimensionality. Unlike {@link GEOSEquals()}, geometries that are topologically equivalent but have different representations (e.g., LINESTRING (0 0, 1 1) and MULTILINESTRING ((0 0, 1 1)) ) are not considered equal by {@link GEOSEqualsExact()}.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @param tolerance - Tolerance to determine vertex equality
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSNormalize()
     * @deprecated this function is not exported
     */
    GEOSEqualsExact(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, tolerance: f64): i8;

    /**
     * Determine pointwise equivalence of two geometries by checking that the structure, ordering, and values of all vertices are identical in all dimensions. NaN values are considered to be equal to other NaN values.
     * @param g1 - Input geometry
     * @param g2 - Input geometry
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSEqualsIdentical(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} string for a geometry pair and compare against a DE9IM pattern to check for consistency. If the result matches the pattern return true. The pattern is a 9-character string containing symbols in the set "012TF*". "012F" match the corresponding dimension symbol; "T" matches any non-empty dimension; "*" matches any dimension.
     * @param g1 - First geometry in pair
     * @param g2 - Second geometry in pair
     * @param imPattern - DE9IM pattern to match
     * @returns 1 on true, 0 on false, 2 on exception
     * @see geos::geom::Geometry::relate
     * @deprecated this function is not exported
     */
    GEOSRelatePattern(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, imPattern: ConstPtr<string>): i8;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} string for this geometry pair. The result is a 9-character string containing dimension symbols in the set "012F".
     * @param g1 - First geometry in pair
     * @param g2 - Second geometry in pair
     * @returns DE9IM string. Caller is responsible for freeing with GEOSFree(). NULL on exception
     * @see geos::geom::Geometry::relate
     * @deprecated this function is not exported
     */
    GEOSRelate(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<string>;

    /**
     * Compare a {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} string to a pattern and return true if they are consistent.
     * @param intMatrix - DE9IM string (contains symbols "012F")
     * @param imPattern - Pattern to match to (may also contain symbols "T" and "*")
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSRelatePatternMatch(intMatrix: ConstPtr<string>, imPattern: ConstPtr<string>): i8;

    /**
     * Calculate the {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} string for this geometry pair, using the supplied {@link GEOSRelateBoundaryNodeRules}.
     * @param g1 - First geometry in pair
     * @param g2 - Second geometry in pair
     * @param bnr - A member of the GEOSRelateBoundaryNodeRules enum
     * @returns DE9IM string. Caller is responsible for freeing with GEOSFree(). NULL on exception
     * @see geos::geom::Geometry::relate
     * @see geos::algorithm::BoundaryNodeRule
     * @deprecated this function is not exported
     */
    GEOSRelateBoundaryNodeRule(g1: ConstPtr<GEOSGeometry>, g2: ConstPtr<GEOSGeometry>, bnr: i32): Ptr<string>;

    /**
     * Create a Prepared Geometry. The caller retains ownership of the base geometry, and after processing is complete, must free **both** the prepared and the base geometry. (Ideally, destroy the prepared geometry first, as it has an internal reference to the base geometry.)
     * @param g - The base geometry to wrap in a prepared geometry.
     * @returns A prepared geometry. Caller is responsible for freeing with GEOSPreparedGeom_destroy()
     * @deprecated this function is not exported
     */
    GEOSPrepare(g: ConstPtr<GEOSGeometry>): ConstPtr<GEOSPreparedGeometry>;

    /**
     * Free the memory associated with a {@link GEOSPreparedGeometry}. Caller must separately free the base {@link GEOSGeometry} used to create the prepared geometry.
     * @param g - Prepared geometry to destroy.
     * @deprecated this function is not exported
     */
    GEOSPreparedGeom_destroy(g: ConstPtr<GEOSPreparedGeometry>): void;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry is contained.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSContains
     * @deprecated this function is not exported
     */
    GEOSPreparedContains(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided point is contained.
     * @param pg1 - The prepared geometry
     * @param x - x coordinate of point to test
     * @param y - y coordinate of point to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSContains
     * @deprecated this function is not exported
     */
    GEOSPreparedContainsXY(pg1: ConstPtr<GEOSPreparedGeometry>, x: f64, y: f64): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry is contained properly.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @deprecated this function is not exported
     */
    GEOSPreparedContainsProperly(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Using a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry is covered by.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSCoveredBy
     * @deprecated this function is not exported
     */
    GEOSPreparedCoveredBy(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Using a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry covers.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSCovers
     * @deprecated this function is not exported
     */
    GEOSPreparedCovers(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Using a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry crosses.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSCrosses
     * @deprecated this function is not exported
     */
    GEOSPreparedCrosses(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry is disjoint.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSDisjoint
     * @deprecated this function is not exported
     */
    GEOSPreparedDisjoint(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry intersects.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSIntersects
     * @deprecated this function is not exported
     */
    GEOSPreparedIntersects(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided point intersects.
     * @param pg1 - The prepared geometry
     * @param x - x coordinate of point to test
     * @param y - y coordinate of point to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSIntersects
     * @deprecated this function is not exported
     */
    GEOSPreparedIntersectsXY(pg1: ConstPtr<GEOSPreparedGeometry>, x: f64, y: f64): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry overlaps.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSOverlaps
     * @deprecated this function is not exported
     */
    GEOSPreparedOverlaps(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry touches.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSTouches
     * @deprecated this function is not exported
     */
    GEOSPreparedTouches(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation of whether the provided geometry is within.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSWithin
     * @deprecated this function is not exported
     */
    GEOSPreparedWithin(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high-performance calculation of the {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} relationship between the prepared and provided geometry.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns The DE9IM string
     * @see GEOSPrepare
     * @see GEOSRelate
     * @see GEOSPreparedRelatePattern
     * @deprecated this function is not exported
     */
    GEOSPreparedRelate(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<string>;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high-performance calculation of the {@link https://en.wikipedia.org/wiki/DE-9IM|DE9IM} relationship between the prepared and provided geometry, and compare the relationship to the provided DE9IM pattern. Returns true if the patterns are consistent and false otherwise.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @param imPattern - The DE9IM pattern to test
     * @returns 1 on true, 0 on false, 2 on exception
     * @see GEOSPrepare
     * @see GEOSRelatePattern
     * @see GEOSPreparedRelate
     * @deprecated this function is not exported
     */
    GEOSPreparedRelatePattern(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>, imPattern: ConstPtr<string>): i8;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation to find the nearest points between the prepared and provided geometry.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @returns A coordinate sequence containing the nearest points, or NULL on exception. The first point in the sequence is from the prepared geometry, and the seconds is from the other argument.
     * @deprecated this function is not exported
     */
    GEOSPreparedNearestPoints(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>): Ptr<GEOSCoordSequence>;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation to find the distance between the prepared and provided geometry. Useful for situations where one geometry is large and static and needs to be tested against a large number of other geometries.
     * @param pg1 (in) - The prepared geometry
     * @param g2 (in) - The geometry to test
     * @param dist (out) - Pointer to store the result in
     * @returns 1 on success
     * @deprecated this function is not exported
     */
    GEOSPreparedDistance(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>, dist: Ptr<f64>): i32;

    /**
     * Use a {@link GEOSPreparedGeometry} do a high performance calculation to find whether the prepared and provided geometry are within the given max distance. Useful for situations where one geometry is large and static and needs to be tested against a large number of other geometries.
     * @param pg1 - The prepared geometry
     * @param g2 - The geometry to test
     * @param dist - The max distance
     * @returns 1 on success
     * @deprecated this function is not exported
     */
    GEOSPreparedDistanceWithin(pg1: ConstPtr<GEOSPreparedGeometry>, g2: ConstPtr<GEOSGeometry>, dist: f64): i8;

    /**
     * Create a new {@link GEOSSTRtree} using the Sort-Tile-Recursive algorithm ({@link https://en.wikipedia.org/wiki/R-tree|STRtree}) for two-dimensional spatial data.
     * @param nodeCapacity - The maximum number of child nodes that a node may have. The minimum recommended capacity value is 4. If unsure, use a default node capacity of 10.
     * @returns a pointer to the created tree
     * @deprecated this function is not exported
     */
    GEOSSTRtree_create(nodeCapacity: u32): Ptr<GEOSSTRtree>;

    /**
     * Construct an STRtree from items that have been inserted. Once constructed, no more items may be inserted into the tree. Functions that require a constructed tree will build it automatically, so there is no need to call `GEOSSTRtree_build` unless it is desired to explicitly construct the tree in a certain section of code or using a certain thread.
     * @param tree - the GEOSSTRtree to apply the build to
     * @returns 1 on success, 0 on error
     * @deprecated this function is not exported
     */
    GEOSSTRtree_build(tree: Ptr<GEOSSTRtree>): i32;

    /**
     * Insert an item into an {@link GEOSSTRtree}
     * Note: The tree does **not** take ownership of the geometry or the item.
     * @param tree - the GEOSSTRtree in which the item should be inserted
     * @param g - a GEOSGeometry whose envelope corresponds to the extent of 'item'. As of GEOS 3.9, this envelope will be copied into the tree and the caller may destroy g while the tree is still in use. Before GEOS 3.9, g must be retained until the tree is destroyed.
     * @param item - the item to insert into the tree
     * @deprecated this function is not exported
     */
    GEOSSTRtree_insert(tree: Ptr<GEOSSTRtree>, g: ConstPtr<GEOSGeometry>, item: Ptr<void>): void;

    /**
     * Query a {@link GEOSSTRtree} for items intersecting a specified envelope. The tree will automatically be constructed if necessary, after which no more items may be added.
     * @param tree - the GEOSSTRtree to search
     * @param g - a GEOSGeomety from which a query envelope will be extracted
     * @param callback - a function to be executed for each item in the tree whose envelope intersects the envelope of 'g'. The callback function should take two parameters: a void pointer representing the located item in the tree, and a void userdata pointer.
     * @param userdata - an optional pointer to pe passed to callback as an argument
     * @deprecated this function is not exported
     */
    GEOSSTRtree_query(tree: Ptr<GEOSSTRtree>, g: ConstPtr<GEOSGeometry>, callback: Ptr<GEOSQueryCallback>, userdata: Ptr<void>): void;

    /**
     * Returns the nearest item in the {@link GEOSSTRtree} to the supplied geometry. All items in the tree MUST be of type {@link GEOSGeometry}. If this is not the case, use {@link GEOSSTRtree_nearest_generic()} instead. The tree will automatically be constructed if necessary, after which no more items may be added.
     * @param tree - the GEOSSTRtree to search
     * @param geom - the geometry with which the tree should be queried
     * @returns a const pointer to the nearest GEOSGeometry in the tree to 'geom', or NULL in case of exception
     * @deprecated this function is not exported
     */
    GEOSSTRtree_nearest(tree: Ptr<GEOSSTRtree>, geom: ConstPtr<GEOSGeometry>): ConstPtr<GEOSGeometry>;

    /**
     * Returns the nearest item in the {@link GEOSSTRtree} to the supplied item The tree will automatically be constructed if necessary, after which no more items may be added.
     * @param tree - the STRtree to search
     * @param item - the item with which the tree should be queried
     * @param itemEnvelope - a GEOSGeometry having the bounding box of 'item'
     * @param distancefn - a function that can compute the distance between two items in the STRtree. The function should return zero in case of error, and should store the computed distance to the location pointed to by the distance argument. The computed distance between two items must not exceed the Cartesian distance between their envelopes.
     * @param userdata - optional pointer to arbitrary data; will be passed to distancefn each time it is called.
     * @returns a const pointer to the nearest item in the tree to item, or NULL in case of exception
     * @deprecated this function is not exported
     */
    GEOSSTRtree_nearest_generic(tree: Ptr<GEOSSTRtree>, item: ConstPtr<void>, itemEnvelope: ConstPtr<GEOSGeometry>, distancefn: Ptr<GEOSDistanceCallback>, userdata: Ptr<void>): ConstPtr<void>;

    /**
     * Iterate over all items in the {@link GEOSSTRtree}. This will not cause the tree to be constructed.
     * @param tree - the STRtree over which to iterate
     * @param callback - a function to be executed for each item in the tree.
     * @param userdata - payload to pass the callback function.
     * @deprecated this function is not exported
     */
    GEOSSTRtree_iterate(tree: Ptr<GEOSSTRtree>, callback: Ptr<GEOSQueryCallback>, userdata: Ptr<void>): void;

    /**
     * Removes an item from the {@link GEOSSTRtree} The tree will automatically be constructed if necessary, after which no more items may be added.
     * @param tree - the STRtree from which to remove an item
     * @param g - the envelope of the item to remove
     * @param item - the item to remove
     * @returns 0 if the item was not removed; 1 if the item was removed; 2 if an exception occurred
     * @deprecated this function is not exported
     */
    GEOSSTRtree_remove(tree: Ptr<GEOSSTRtree>, g: ConstPtr<GEOSGeometry>, item: Ptr<void>): i8;

    /**
     * Frees all the memory associated with a {@link GEOSSTRtree}. Only the tree is freed. The geometries and items fed into {@link GEOSSTRtree_insert()} are not owned by the tree, and are still left to the caller to manage.
     * @param tree - the GEOSSTRtree to destroy
     * @deprecated this function is not exported
     */
    GEOSSTRtree_destroy(tree: Ptr<GEOSSTRtree>): void;

    /**
     * Computes the coordinate where two line segments intersect, if any
     * @param ax0 (in) - x-coordinate of 1st point in 1st segment
     * @param ay0 (in) - y-coordinate of 1st point in 1st segment
     * @param ax1 (in) - x-coordinate of 2nd point in 1st segment
     * @param ay1 (in) - y-coordinate of 2nd point in 1st segment
     * @param bx0 (in) - x-coordinate of 1st point in 2nd segment
     * @param by0 (in) - y-coordinate of 1st point in 2nd segment
     * @param bx1 (in) - x-coordinate of 2nd point in 2nd segment
     * @param by1 (in) - y-coordinate of 2nd point in 2nd segment
     * @param cx (out) - x-coordinate of intersection point
     * @param cy (out) - y-coordinate of intersection point
     * @returns 0 on error, 1 on success, -1 if segments do not intersect
     * @deprecated this function is not exported
     */
    GEOSSegmentIntersection(ax0: f64, ay0: f64, ax1: f64, ay1: f64, bx0: f64, by0: f64, bx1: f64, by1: f64, cx: Ptr<f64>, cy: Ptr<f64>): i32;

    /**
     * For the points formed by the six input ordinates, walking from A to B and then to P.
     * @param Ax - X coordinate of A
     * @param Ay - Y coordinate of A
     * @param Bx - X coordinate of B
     * @param By - Y coordinate of B
     * @param Px - X coordinate of P
     * @param Py - Y coordinate of P
     * @returns -1 if reaching P takes a counter-clockwise (left) turn, 1 if reaching P takes a clockwise (right) turn, 0 if P is collinear with A-B
     * @deprecated this function is not exported
     */
    GEOSOrientationIndex(Ax: f64, Ay: f64, Bx: f64, By: f64, Px: f64, Py: f64): i32;

    /**
     * Allocate a new {@link GEOSWKTReader}.
     * @returns a new reader. Caller must free with GEOSWKTReader_destroy()
     */
    GEOSWKTReader_create(): Ptr<GEOSWKTReader>;

    /**
     * Free the memory associated with a {@link GEOSWKTReader}.
     * @param reader - The reader to destroy.
     * @deprecated this function is not exported
     */
    GEOSWKTReader_destroy(reader: Ptr<GEOSWKTReader>): void;

    /**
     * Use a reader to parse the well-known text representation of a geometry, and return an allocated geometry.
     * @param reader - A WKT reader object, caller retains ownership
     * @param wkt - The WKT string to parse, caller retains ownership
     * @returns A GEOSGeometry, caller to free with GEOSGeom_destroy())
     */
    GEOSWKTReader_read(reader: Ptr<GEOSWKTReader>, wkt: ConstPtr<string>): Ptr<GEOSGeometry>;

    /**
     * Set the reader to automatically repair structural errors in the input (currently just unclosed rings) while reading.
     * @param reader - A WKT reader object, caller retains ownership
     * @param doFix - Set to 1 to repair, 0 for no repair (default).
     */
    GEOSWKTReader_setFixStructure(reader: Ptr<GEOSWKTReader>, doFix: i8): void;

    /**
     * Allocate a new {@link GEOSWKTWriter}.
     * @returns a new writer. Caller must free with GEOSWKTWriter_destroy()
     */
    GEOSWKTWriter_create(): Ptr<GEOSWKTWriter>;

    /**
     * Free the memory associated with a {@link GEOSWKTWriter}.
     * @param writer - The writer to destroy.
     * @deprecated this function is not exported
     */
    GEOSWKTWriter_destroy(writer: Ptr<GEOSWKTWriter>): void;

    /**
     * Writes out the well-known text representation of a geometry, using the trim, rounding and dimension settings of the writer.
     * @param writer - A GEOSWKTWriter.
     * @param g - Input geometry
     * @returns A newly allocated string containing the WKT output or NULL on exception. Caller must free with GEOSFree()
     */
    GEOSWKTWriter_write(writer: Ptr<GEOSWKTWriter>, g: ConstPtr<GEOSGeometry>): Ptr<string>;

    /**
     * Sets the number trimming option on a {@link GEOSWKTWriter}. With trim set to 1, the writer will strip trailing 0's from the output coordinates. With 1 (trimming enabled), big and small absolute coordinates will use scientific notation, otherwise positional notation is used; see {@link GEOS_printDouble} for details. With 0 (trimming disabled), all coordinates will be padded with 0's out to the rounding precision. Default since GEOS 3.12 is with trim set to 1 for 'on'.
     * @param writer - A GEOSWKTWriter.
     * @param trim - The trimming behaviour to set, 1 for 'on', 0 for 'off'
     */
    GEOSWKTWriter_setTrim(writer: Ptr<GEOSWKTWriter>, trim: i8): void;

    /**
     * Sets the number places after the decimal to output in WKT.
     * @param writer - A GEOSWKTWriter.
     * @param precision - The desired precision, default 16.
     */
    GEOSWKTWriter_setRoundingPrecision(writer: Ptr<GEOSWKTWriter>, precision: i32): void;

    /**
     * Set the output dimensionality of the writer. Either 2, 3, or 4 dimensions. Default since GEOS 3.12 is 4.
     * @param writer - A GEOSWKTWriter.
     * @param dim - The dimensionality desired.
     */
    GEOSWKTWriter_setOutputDimension(writer: Ptr<GEOSWKTWriter>, dim: i32): void;

    /**
     * Reads the current output dimension from a {@link GEOSWKTWriter}.
     * @param writer - A GEOSWKTWriter.
     * @returns The current dimension.
     * @deprecated this function is not exported
     */
    GEOSWKTWriter_getOutputDimension(writer: Ptr<GEOSWKTWriter>): i32;

    /**
     * Sets the format for 3D outputs. The "old 3D" format does not include a Z dimension tag, e.g. "POINT (1 2 3)", except for XYM, e.g. "POINT M (1 2 3)". Geometries with XYZM coordinates do not add any dimensionality tags, e.g. "POINT (1 2 3 4)".
     * @param writer - A GEOSWKTWriter.
     * @param useOld3D - True to use the old format, false is the default.
     * @deprecated this function is not exported
     */
    GEOSWKTWriter_setOld3D(writer: Ptr<GEOSWKTWriter>, useOld3D: i32): void;

    /**
     * Allocate a new {@link GEOSWKBReader}.
     * @returns a new reader. Caller must free with GEOSWKBReader_destroy()
     */
    GEOSWKBReader_create(): Ptr<GEOSWKBReader>;

    /**
     * Free the memory associated with a {@link GEOSWKBReader}.
     * @param reader - The reader to destroy.
     * @deprecated this function is not exported
     */
    GEOSWKBReader_destroy(reader: Ptr<GEOSWKBReader>): void;

    /**
     * Set the reader to automatically repair structural errors in the input (currently just unclosed rings) while reading.
     * @param reader - A WKB reader object, caller retains ownership
     * @param doFix - Set to 1 to repair, 0 for no repair (default).
     */
    GEOSWKBReader_setFixStructure(reader: Ptr<GEOSWKBReader>, doFix: i8): void;

    /**
     * Read a geometry from a well-known binary buffer.
     * @param reader - A GEOSWKBReader
     * @param wkb - A pointer to the buffer to read from
     * @param size - The number of bytes of data in the buffer
     * @returns A GEOSGeometry built from the WKB, or NULL on exception.
     */
    GEOSWKBReader_read(reader: Ptr<GEOSWKBReader>, wkb: ConstPtr<u8>, size: u32): Ptr<GEOSGeometry>;

    /**
     * Read a geometry from a **hex encoded** well-known binary buffer.
     * @param reader - A GEOSWKBReader
     * @param hex - A pointer to the buffer to read from
     * @param size - The number of bytes of data in the buffer
     * @returns A GEOSGeometry built from the HEX WKB, or NULL on exception.
     * @deprecated this function is not exported
     */
    GEOSWKBReader_readHEX(reader: Ptr<GEOSWKBReader>, hex: ConstPtr<u8>, size: u32): Ptr<GEOSGeometry>;

    /**
     * Allocate a new {@link GEOSWKBWriter}.
     * @returns a new writer. Caller must free with GEOSWKBWriter_destroy()
     */
    GEOSWKBWriter_create(): Ptr<GEOSWKBWriter>;

    /**
     * Free the memory associated with a {@link GEOSWKBWriter}.
     * @param writer - The writer to destroy.
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_destroy(writer: Ptr<GEOSWKBWriter>): void;

    /**
     * Write out the WKB representation of a geometry.
     * @param writer - The GEOSWKBWriter controlling the writing.
     * @param g - Geometry to convert to WKB
     * @param size - Pointer to write the size of the final output WKB to
     * @returns The WKB representation. Caller must free with GEOSFree()
     */
    GEOSWKBWriter_write(writer: Ptr<GEOSWKBWriter>, g: ConstPtr<GEOSGeometry>, size: Ptr<u32>): Ptr<u8>;

    /**
     * Write out the **hex** WKB representation of a geometry.
     * @param writer - The GEOSWKBWriter controlling the writing.
     * @param g - Geometry to convert to WKB
     * @param size - Pointer to write the size of the final output WKB to
     * @returns The HEX WKB representation. Caller must free with GEOSFree()
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_writeHEX(writer: Ptr<GEOSWKBWriter>, g: ConstPtr<GEOSGeometry>, size: Ptr<u32>): Ptr<u8>;

    /**
     * Read the current output dimension of the writer. Either 2, 3, or 4 dimensions. Return current number of dimensions.
     * @param writer - The writer to read from.
     * @returns Number of dimensions (2, 3, or 4)
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_getOutputDimension(writer: ConstPtr<GEOSWKBWriter>): i32;

    /**
     * Set the output dimensionality of the writer. Either 2, 3, or 4 dimensions. Default since GEOS 3.12 is 4.
     * @param writer - The writer to read from.
     * @param newDimension - The dimensionality desired
     */
    GEOSWKBWriter_setOutputDimension(writer: Ptr<GEOSWKBWriter>, newDimension: i32): void;

    /**
     * Find whether the writer will use WKB {@link https://en.wikipedia.org/wiki/Endianness|byte order} that is big or little endian. The return value is a member of {@link GEOSWKBByteOrders}.
     * @param writer - The writer to read byte order from
     * @returns The current byte order
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_getByteOrder(writer: ConstPtr<GEOSWKBWriter>): i32;

    /**
     * Set the output byte order of the writer, using a value from {@link GEOSWKBByteOrders} enum.
     * @param writer - The writer to set byte order on
     * @param byteOrder - Desired byte order
     */
    GEOSWKBWriter_setByteOrder(writer: Ptr<GEOSWKBWriter>, byteOrder: i32): void;

    /**
     * Find whether the writer will use {@link https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary|WKB} that is ISO flavor or "extended" flavor. The flavor determines how extra dimensionality is encoded with the type number, and whether SRID can be included in the WKB. ISO flavor does not support SRID embedding. ISO flavor is "more standard" for 3D output. GEOS can read both flavors. The return value is a member of {@link GEOSWKBFlavors}.
     * @param writer - The writer to read flavor from
     * @returns The current flavor
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_getFlavor(writer: ConstPtr<GEOSWKBWriter>): i32;

    /**
     * Set the output flavor of the writer, using a value from {@link GEOSWKBFlavors} enum.
     * @param writer - The writer to set flavor on
     * @param flavor - Desired flavor
     */
    GEOSWKBWriter_setFlavor(writer: Ptr<GEOSWKBWriter>, flavor: i32): void;

    /**
     * Read the current SRID embedding value from the writer.
     * @param writer - The writer to check SRID value on
     * @deprecated this function is not exported
     */
    GEOSWKBWriter_getIncludeSRID(writer: ConstPtr<GEOSWKBWriter>): i8;

    /**
     * Specify whether SRID values should be output in WKB. Many WKB readers do not support SRID values, use with caution.
     * @param writer - The writer to set SRID output on
     * @param writeSRID - Set to 1 to include SRID, 0 otherwise
     */
    GEOSWKBWriter_setIncludeSRID(writer: Ptr<GEOSWKBWriter>, writeSRID: i8): void;

    /**
     * Allocate a new {@link GEOSGeoJSONReader}.
     * @returns a new reader. Caller must free with GEOSGeoJSONReader_destroy()
     * @deprecated this function is not exported
     */
    GEOSGeoJSONReader_create(): Ptr<GEOSGeoJSONReader>;

    /**
     * Free the memory associated with a {@link GEOSGeoJSONReader}.
     * @param reader - The reader to destroy.
     * @deprecated this function is not exported
     */
    GEOSGeoJSONReader_destroy(reader: Ptr<GEOSGeoJSONReader>): void;

    /**
     * Use a reader to parse a GeoJSON string. A single geometry or `Feature` is parsed as a geometry. A `FeatureCollection` is parsed as a `GeometryCollection`. Feature properties are not read.
     * @param reader - A GeoJSON reader object, caller retains ownership
     * @param geojson - The json string to parse, caller retains ownership
     * @returns A GEOSGeometry, caller to free with GEOSGeom_destroy())
     * @deprecated this function is not exported
     */
    GEOSGeoJSONReader_readGeometry(reader: Ptr<GEOSGeoJSONReader>, geojson: ConstPtr<string>): Ptr<GEOSGeometry>;

    /**
     * Allocate a new {@link GEOSGeoJSONWriter}.
     * @returns a new writer. Caller must free with GEOSGeoJSONWriter_destroy()
     * @deprecated this function is not exported
     */
    GEOSGeoJSONWriter_create(): Ptr<GEOSGeoJSONWriter>;

    /**
     * Free the memory associated with a {@link GEOSGeoJSONWriter}.
     * @param writer - The writer to destroy.
     * @deprecated this function is not exported
     */
    GEOSGeoJSONWriter_destroy(writer: Ptr<GEOSGeoJSONWriter>): void;

    /**
     * Write out the GeoJSON representation of a geometry. Note that writing a GeoJSON Feature or FeatureCollection is unsupported through the GEOS C API.
     * @param writer - A GeoJSON reader object, caller retains ownership.
     * @param g - The geometry to convert, caller retains ownership.
     * @param indent - The indentation used. Use -1 for no formatting.
     * @returns A char pointer, caller to free with GEOSFree())
     * @deprecated this function is not exported
     */
    GEOSGeoJSONWriter_writeGeometry(writer: Ptr<GEOSGeoJSONWriter>, g: ConstPtr<GEOSGeometry>, indent: i32): Ptr<string>;

    /**
     * Returns minimum rectangular polygon or point that contains the geometry, or an empty point for empty inputs.
     * @param g - The geometry to calculate an envelope for
     * @returns A newly allocated polygonal envelope or point. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSEnvelope(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the "boundary" of a geometry, as defined by the DE9IM:
     * - the boundary of a polygon is the linear rings dividing the exterior from the interior
     * - the boundary of a linestring is the end points
     * - the boundary of a point is the point
     * @param g - The input geometry
     * @returns A newly allocated geometry of the boundary. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSBoundary(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns convex hull of a geometry. The smallest convex Geometry that contains all the points in the input Geometry
     * @param g - The input geometry
     * @returns A newly allocated geometry of the convex hull. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::operation::overlayng::OverlayNG
     * @deprecated this function is not exported
     */
    GEOSConvexHull(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns a "concave hull" of a geometry. A concave hull is a polygon which contains all the points of the input, but is a better approximation than the convex hull to the area occupied by the input. Frequently used to convert a multi-point into a polygonal area. that contains all the points in the input Geometry.
     * A set of points has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The concave hull is constructed by removing the longest outer edges of the Delaunay Triangulation of the space between the polygons, until the target criterion parameter is reached. This can be expressed as a ratio between the lengths of the longest and shortest edges. 1 produces the convex hull; 0 produces a hull with maximum concaveness
     * Caller is responsible for freeing with {@link GEOSGeom_destroy()}.
     * @param g - The input geometry
     * @param ratio - The edge length ratio value, between 0 and 1.
     * @param allowHoles - When non-zero, the polygonal output may contain holes.
     * @returns A newly allocated geometry of the concave hull. NULL on exception.
     * @see geos::algorithm::hull::ConcaveHull
     * @see GEOSConcaveHullByLength
     * @see GEOSConcaveHullOfPolygons
     * @see GEOSConvexHull
     * @deprecated this function is not exported
     */
    GEOSConcaveHull(g: ConstPtr<GEOSGeometry>, ratio: f64, allowHoles: u32): Ptr<GEOSGeometry>;

    /**
     * Returns a "concave hull" of a geometry. A concave hull is a polygon which contains all the points of the input, but is a better approximation than the convex hull to the area occupied by the input. Frequently used to convert a multi-point into a polygonal area. that contains all the points in the input Geometry.
     * A set of points has a sequence of hulls of increasing concaveness, determined by a numeric target parameter. The concave hull is constructed by removing the longest outer edges of the Delaunay Triangulation of the space between the polygons, until the specified maximm edge length is reached. A large value produces the convex hull, 0 produces the hull of maximum concaveness.
     * Caller is responsible for freeing with {@link GEOSGeom_destroy()}.
     * @param g - The input geometry
     * @param length - The maximum edge length (0 or greater)
     * @param allowHoles - When non-zero, the polygonal output may contain holes.
     * @returns A newly allocated geometry of the concave hull. NULL on exception.
     * @see geos::algorithm::hull::ConcaveHull
     * @see GEOSConcaveHull
     * @see GEOSConcaveHullOfPolygons
     * @see GEOSConvexHull
     * @deprecated this function is not exported
     */
    GEOSConcaveHullByLength(g: ConstPtr<GEOSGeometry>, length: f64, allowHoles: u32): Ptr<GEOSGeometry>;

    /**
     * Constructs a concave hull of a set of polygons, respecting the polygons as constraints.
     * A concave hull is a (possibly) non-convex polygon containing all the input polygons. The computed hull "fills the gap" between the polygons, and does not intersect their interior. A set of polygons has a sequence of hulls of increasing concaveness, determined by a numeric target parameter.
     * The concave hull is constructed by removing the longest outer edges of the Delaunay Triangulation of the space between the polygons, until the target criterion parameter is reached. The "Maximum Edge Length" parameter limits the length of the longest edge between polygons to be no larger than this value. This can be expressed as a ratio between the lengths of the longest and shortest edges.
     * The input polygons _must_ be a _valid_ MultiPolygon (i.e. they must be non-overlapping).
     * Caller is responsible for freeing with {@link GEOSGeom_destroy()}.
     * @param g - the valid MultiPolygon geometry to process
     * @param lengthRatio - specifies the Maximum Edge Length as a fraction of the difference between the longest and shortest edge lengths between the polygons. This normalizes the Maximum Edge Length to be scale-free. A value of 1 produces the convex hull; a value of 0 produces the original polygons.
     * @param isHolesAllowed - is the concave hull allowed to contain holes?
     * @param isTight - does the hull follow the outer boundaries of the input polygons.
     * @returns A newly allocated geometry of the concave hull. NULL on exception.
     * @see geos::algorithm::hull::ConcaveHullOfPolygons
     * @see GEOSConcaveHull
     * @see GEOSConvexHull
     * @deprecated this function is not exported
     */
    GEOSConcaveHullOfPolygons(g: ConstPtr<GEOSGeometry>, lengthRatio: f64, isTight: u32, isHolesAllowed: u32): Ptr<GEOSGeometry>;

    /**
     * Computes a boundary-respecting hull of a polygonal geometry, with hull shape determined by a target parameter specifying the fraction of the input vertices retained in the result. Larger values produce less concave results. A value of 1 produces the convex hull; a value of 0 produces the original geometry. An outer hull is computed if the parameter is positive, an inner hull is computed if it is negative.
     * Caller is responsible for freeing with {@link GEOSGeom_destroy()}.
     * @param g - the polygonal geometry to process
     * @param isOuter - indicates whether to compute an outer or inner hull (1 for outer hull, 0 for inner)
     * @param vertexNumFraction - the target fraction of the count of input vertices to retain in result
     * @returns A newly allocated geometry of the concave hull. NULL on exception.
     * @see geos::simplify::PolygonHullSimplifier
     * @deprecated this function is not exported
     */
    GEOSPolygonHullSimplify(g: ConstPtr<GEOSGeometry>, isOuter: u32, vertexNumFraction: f64): Ptr<GEOSGeometry>;

    /**
     * Computes a topology-preserving simplified hull of a polygonal geometry, with hull shape determined by the parameter, controlled by a parameter mode, which is one defined in {@link GEOSPolygonHullParameterModes}. Larger values compute less concave results and a value of 0 produces the original geometry. Either outer or inner hulls can be computed.
     * Caller is responsible for freeing with {@link GEOSGeom_destroy()}.
     * @param g - the polygonal geometry to process
     * @param isOuter - indicates whether to compute an outer or inner hull (1 for outer hull, 0 for inner)
     * @param parameterMode - the interpretation to apply to the parameter argument; see GEOSPolygonHullParameterModes
     * @param parameter - the target ratio of area difference to original area
     * @returns A newly allocated geometry of the concave hull. NULL on exception.
     * @see geos::simplify::PolygonHullSimplifier
     * @see GEOSPolygonHullParameterModes
     * @see GEOSPolygonHullSimplify
     * @deprecated this function is not exported
     */
    GEOSPolygonHullSimplifyMode(g: ConstPtr<GEOSGeometry>, isOuter: u32, parameterMode: u32, parameter: f64): Ptr<GEOSGeometry>;

    /**
     * Returns the minimum rotated rectangular POLYGON which encloses the input geometry. The rectangle has width equal to the minimum diameter, and a longer length. If the convex hill of the input is degenerate (a line or point) a linestring or point is returned. The minimum rotated rectangle can be used as an extremely generalized representation for the given geometry.
     * @param g - The input geometry
     * @returns A newly allocated geometry of the rotated envelope. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSMinimumRotatedRectangle(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Constructs the "maximum inscribed circle" (MIC) for a polygonal geometry, up to a specified tolerance. The MIC is determined by a point in the interior of the area which has the farthest distance from the area boundary, along with a boundary point at that distance. In the context of geography the center of the MIC is known as the "pole of inaccessibility". A cartographic use case is to determine a suitable point to place a map label within a polygon. The radius length of the MIC is a measure of how "narrow" a polygon is. It is the distance at which the negative buffer becomes empty. The class supports polygons with holes and multipolygons. The implementation uses a successive-approximation technique over a grid of square cells covering the area geometry. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes. Returns a two-point linestring, with one point at the center of the inscribed circle and the other on the boundary of the inscribed circle.
     * @param g - Input geometry
     * @param tolerance - Stop the algorithm when the search area is smaller than this tolerance
     * @returns A newly allocated geometry of the MIC. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::algorithm::construct::MaximumInscribedCircle
     * @deprecated this function is not exported
     */
    GEOSMaximumInscribedCircle(g: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Constructs the "largest empty circle" (LEC) for a set of obstacle geometries and within a polygonal boundary, with accuracy to to a specified distance tolerance. The obstacles may be any collection of points, lines and polygons. The LEC is the largest circle whose interior does not intersect with any obstacle. and which has its **center** inside the given boundary. If no boundary is provided, the convex hull of the obstacles is used. The LEC center is the point in the interior of the boundary which has the farthest distance from the obstacles (up to the given distance tolerance). The LEC is determined by the center point and a point indicating the circle radius (which will lie on an obstacle).
     * To compute an LEC which lies **wholly** within a polygonal boundary, include the boundary of the polygon(s) as a linear obstacle.
     * The implementation uses a successive-approximation technique over a grid of square cells covering the obstacles and boundary. The grid is refined using a branch-and-bound algorithm. Point containment and distance are computed in a performant way by using spatial indexes.
     * Returns the LEC radius as a two-point linestring, with the start point at the center of the inscribed circle and the end on the boundary of the circle.
     * @param obstacles - The geometries that the LEC must not cross
     * @param boundary - The area to contain the LEC center (may be null or empty)
     * @param tolerance - Stop the algorithm when the search area is smaller than this tolerance
     * @returns A newly allocated geometry of the LEC radius line. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::algorithm::construct::LargestEmptyCircle
     * @deprecated this function is not exported
     */
    GEOSLargestEmptyCircle(obstacles: ConstPtr<GEOSGeometry>, boundary: ConstPtr<GEOSGeometry>, tolerance: f64): Ptr<GEOSGeometry>;

    /**
     * Returns a linestring geometry which represents the minimum diameter of the geometry. The minimum diameter is defined to be the width of the smallest band that contains the geometry, where a band is a strip of the plane defined by two parallel lines. This can be thought of as the smallest hole that the geometry can be moved through, with a single rotation.
     * @param g - The input geometry
     * @returns A newly allocated geometry of the LEC. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::algorithm::MinimumDiameter
     * @deprecated this function is not exported
     */
    GEOSMinimumWidth(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns a point that is inside the boundary of a polygonal geometry.
     * @param g - The input geometry
     * @returns A point that is inside the input Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::algorithm::InteriorPointArea
     * @deprecated this function is not exported
     */
    GEOSPointOnSurface(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns a point at the center of mass of the input.
     * @param g - The input geometry
     * @returns A point at the center of mass of the input Caller is responsible for freeing with GEOSGeom_destroy().
     * @see geos::algorithm::Centroid
     * @deprecated this function is not exported
     */
    GEOSGetCentroid(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns a geometry which represents the "minimum bounding circle", the smallest circle that contains the input.
     * @param g (in) - The input geometry
     * @param radius (out) - Pointer will be filled with output radius.
     * @param center (out) - Pointer will be filled with output circle center. Caller must free.
     * @returns The circle geometry or NULL on exception Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSMinimumBoundingCircle(g: ConstPtr<GEOSGeometry>, radius: Ptr<f64>, center: Ptr<GEOSGeometry[]>): Ptr<GEOSGeometry>;

    /**
     * Return a Delaunay triangulation of the vertices of the given geometry.
     * @param g - the input geometry whose vertices will be used as "sites"
     * @param tolerance - optional snapping tolerance to use for improved robustness
     * @param onlyEdges - if non-zero will return a MultiLineString, otherwise it will return a GeometryCollection containing triangular Polygons.
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSDelaunayTriangulation(g: ConstPtr<GEOSGeometry>, tolerance: f64, onlyEdges: i32): Ptr<GEOSGeometry>;

    /**
     * Return a constrained Delaunay triangulation of the vertices of the given polygon(s). For non-polygonal inputs, returns an empty geometry collection.
     * @param g - the input geometry whose rings will be used as input
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSConstrainedDelaunayTriangulation(g: ConstPtr<GEOSGeometry>): Ptr<GEOSGeometry>;

    /**
     * Returns the Voronoi polygons or edges of the vertices of the given geometry.
     * @param g - the input geometry whose vertices will be used as sites.
     * @param tolerance - snapping tolerance to use for improved robustness. A tolerance of 0.0 specifies that no snapping will take place. This argument can be finicky and is known to cause the algorithm to fail in several cases. If you're using tolerance and getting a failure, try setting it to 0.0.
     * @param flags - A value from the GEOSVoronoiFlags enum
     * @param env - clipping envelope for the returned diagram, automatically determined if env is NULL. The diagram will be clipped to the larger of this envelope or an envelope surrounding the sites.
     * @returns A newly allocated geometry. NULL on exception. Caller is responsible for freeing with GEOSGeom_destroy().
     * @deprecated this function is not exported
     */
    GEOSVoronoiDiagram(g: ConstPtr<GEOSGeometry>, env: ConstPtr<GEOSGeometry>, tolerance: f64, flags: i32): Ptr<GEOSGeometry>;

}
